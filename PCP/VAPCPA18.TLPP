#INCLUDE "PROTHEUS.CH"
#INCLUDE "TLPP-CORE.TH"
#INCLUDE "FWMVCDEF.CH"


#define LAYOUT_ALIGN_LEFT     1
#define LAYOUT_ALIGN_RIGHT    2
#define LAYOUT_ALIGN_HCENTER  4
#define LAYOUT_ALIGN_TOP      32
#define LAYOUT_ALIGN_BOTTOM   64
#define LAYOUT_ALIGN_VCENTER  128

namespace custom.VAPCPA18

USER FUNCTION VAPCPA18()
	Private oBrowse as object

	oBrowse := FWLoadBrw("custom.VAPCPA18.VAPCPA18")
	oBrowse:Activate()
	oBrowse:DeActivate()
	oBrowse:Destroy()
	FreeObj(oBrowse)
	oBrowse := nil

Return

user function BrowseDef() as object
	local oBrowse as object

	oBrowse := FWMBrowse():New()
	oBrowse:SetAlias("Z05")
	oBrowse:SetDescription("MVC TLPP - Tabela SED | User Function")

return oBrowse


user function ModelDef() as object
	local oModel   := nil as object
    local oStrHide := HidGrdMStr() as object

	local bLoadHide   := {|oModel, lCopia| LoadHide(oModel, lCopia) } as codeblock

	oModel := MPFormModel():New( "A18VAPCP", /*bPre*/ , /*bPos*/, /*bCommit*/, /*bCancel*/ )
	oModel:SetDescription("Plano de Trato")
	
    oModel:AddFields("MdFieldHide" ,""           , oStrHide,/*bPreValid*/, /*bPosValid*/, bLoadHide)

    oModel:GetModel("MdFieldHide"):SetDescription("CAB_ROTAS")

	oModel:SetPrimaryKey({})

return oModel

user function ViewDef() as object
	local oView 	as object
    local oStrHide 	:= nil as object

    oModel 	:= FwLoadModel("custom.VAPCPA18.VAPCPA18")

    oStrHide 	:= HidGrdVStr()

    oView 	:= FwFormView():New()
    oView:SetModel(oModel)
    
    oView:AddField("VwFieldRotas"	, oStrHide 	, "MdFieldHide"	)

    oView:CreateHorizontalBox("CAB_ROTAS"   , 10)
    oView:CreateHorizontalBox("ITENS"       , 90)

    oView:AddOtherObject("PAINEL_ROTA", {|oPanel| PAINELROTA(oPanel)})

    oView:SetOwnerView("VwFieldRotas"  	, "CAB_ROTAS"	)
    oView:SetOwnerView("PAINEL_ROTA"  	, "ITENS"  )

    oView:EnableTitleView('VwFieldRotas', "Seleção de Rotas")
    oView:EnableTitleView('PAINEL_ROTA'	, "Plano de trato")
    
    oView:SetContinuousForm(.T.)

return oView

static function LoadHide(oModel, lCopia) as Array
    local aArea := GetArea() as Array	
    Local aRet  := {} as Array

    aAdd(aRet, {""})
    aAdd(aRet, {1})
    RestArea(aArea)
Return aRet 

static function HidGrdMStr() AS Object
    local aArea   := GetArea() 
    local oStruct := FWFormModelStruct():New() AS Object

    oStruct:AddField(;
                     "Rotas",;              		// [01]  C   Titulo do campo
                     "",;              				// [02]  C   ToolTip do campo
                     "XX_ROTAS",;   				// [03]  C   Id do Field
                     "C",; 							// [04]  C   Tipo do campo
                     10 ,; 							// [05]  N   Tamanho do campo
                     0,; 							// [06]  N   Decimal do campo
                     /* {|| U_RefreshRotaVAPCPA17()} */ ,;// [07]  B   Code-block de validação do campo
                     nil,;                      	// [08]  B   Code-block de validação When do campo
                     {"ROTA11","ROTA01","ROTA02","ROTA17"},;      // [09]  A   Lista de valores permitido do campo
                     .F.,;                      	// [10]  L   Indica se o campo tem preenchimento obrigatório
                     nil,;                      // [11]  B   Code-block de inicializacao do campo
                     .F.,;                      	// [12]  L   Indica se trata-se de um campo chave
                     .F.,;                      	// [13]  L   Indica se o campo NÃO pode receber valor em uma operação de update.
                     .F.)                       	// [14]  L   Indica se o campo é virtual

	RestArea(aArea)
Return oStruct
static function HidGrdVStr() as Object
	local aArea   := GetArea() as Array
	local oStruct := FWFormViewStruct():New() as Object

		oStruct:AddField(;
			"XX_ROTAS",;        // [01]  C   Nome do Campo
			"1",; 				// [02]  C   Ordem
			"Rotas",;           // [03]  C   Titulo do campo
			"",;                // [04]  C   Descricao do campo
			{"Help"},;          // [05]  A   Array com Help
			"C",;      			// [06]  C   Tipo do campo
			"",;      			// [07]  C   Picture
			nil,;               // [08]  B   Bloco de PictTre Var
			,;                  // [09]  C   Consulta F3
			.T.,;  				// [10]  L   Indica se o campo é alteravel
			nil,;               // [11]  C   Pasta do campo
			nil,;               // [12]  C   Agrupamento do campo
			{"ROTA11","ROTA01","ROTA02","ROTA17"},;               // [13]  A   Lista de valores permitido do campo (Combo)
			nil,;               // [14]  N   Tamanho máximo da maior opção do combo
			nil,;               // [15]  C   Inicializador de Browse
			.t.,;               // [16]  L   Indica se o campo é virtual
			nil,;               // [17]  C   Picture Variável
			nil;                // [18]  L   Indica pulo de linha após o campo
		)

	if !Empty(aArea)
		RestArea(aArea)
	endif
return oStruct

Static Function PAINELROTA(oPanel)
	local aArea   := GetArea() as Array
    Local cQry              := ""
    Local cQryRD1              := ""
    Local cQryRes              := ""
    Local nChvCnf              := 0
    Local nChvCur              := 0
    Local nCntAll              := 0
    Local /*nCntCnf,*/ nCntLin := 2, nCntCur := 2
    Local nRtAux               := 0
    Local cChvCnf, cChvLin
    Local cShwZer              := ""
    Local aSize                := {}, aObjects := {}, aInfo := {}, aPObjs := {}
    Local aTFldr               := {}
    Local oTFldr
    Local oTFntGr              := TFont():New('Courier new', , 16, .T., .T.)
    Local oTFntLC              := TFont():New('Courier new', , 48, .T., .T.)
    Local oTFntPs              := TFont():New('Courier new', , 18, .T., .T.)
    Local oTFntSb              := TFont():New('Courier new', , 16, .T., .T., , , , , .T.) // Sublinhado
    Local oTFntTC              := TFont():New('Courier new', , 26, .T., .T.)
    Local oTFntLg              := TFont():New('Courier new', , 18, .T., .T.)
    Local oTFntLgN             := TFont():New('Courier new', , 19, .T., .T.)
    Local oTFntLgT             := TFont():New('Courier new', , 26, .T., .T.)

    Local nLinLin              := 001
    Local aScrCnf              := {}
    Local aPnlCnf              := {}
    Local nCurLin, nCurCol
    Local oPnlPst
    Local aPnlRot              := {}
    Local aRotCmb              := {}
    Local cDscDie              := ""
    Local cLote                := ""
    Local cLtCur               := ""
    Local cPlCur               := ""
    Local cDiCur               := ""
    Local nCrFnt               := .F.
    Local aCrDBs               := {}
    Local aCrDBR               := {} //
    Local nCrAux               := 1
    Local nIndPRt              := 1
    Local dDtTrt               := aDadSel[2]
    Local lRotD1               := .T.
    Local cRotTrt              := aDadSel[1]
    Local aHdrRes              := {}
    Local aHdrRTr              := {}
    Local aDadRD1              := {}
    Local aRotD1               := {}
    Local oTSTotTr/*, oTSChgCur, oTSChgDie*/
    Local oTCRot
    Local dDtRD1               := dDataBase
    Local cRotAux              := ""
    Local lParRotD1            := GETMV("VA_ROTD1")

    Private aCrDie             := {}
    Private aCrDieR            := {}
    Private aDadTl             := {} //Dados dos currais em linhas
    Private aDdTlC             := {} //Dados dos currais em pastos
    Private aLinCnf            := {}
    Private aCurLin            := {}
    Private aCurPst            := {}
    Private aCorTl             := {}
    Private aRot               := {}
    Private nTotTrt            := 0
    Private nQtdTrt            := 0
    Private _cCurral           := ""
    Private _NroCurral         := 0

    Private aClsRes            := {}
    Private aClsRTr            := {}
    Private oGrdRes, oGrdRTr
    Private nTotCur            := 0
    Private nTotCRt            := 0

    Private nTotCSR            := 0

    Private aDadRotZao         := {}

    AAdd(aCorTl, &("U_CORROTA(" + GETMV("VA_ROTBCKG") + ")")) // cor de fundo das abas
    AAdd(aCorTl, &("U_CORROTA(" + GETMV("VA_ROTBLIN") + ")")) // cor de fundo das linhas
    AAdd(aCorTl, &("U_CORROTA(" + GETMV("VA_ROTBCUR") + ")")) // cor de fundo dos currais
    AAdd(aCorTl, &("U_CORROTA(" + GETMV("VA_ROTFTLC") + ")")) // cor fonte letra linha e numero curral
    AAdd(aCorTl, &("U_CORROTA(" + GETMV("VA_ROTFCUR") + ")")) // cor fonte conteudo curral
    AAdd(aCorTl, &("U_CORROTA(" + GETMV("VA_ROTCSEL") + ")")) // cor fonte curral selecionado

    DBSelectArea("SX6")
    SX6->(DBSetOrder(1))
    While (SX6->(DBSeek(xFilial("SX6") + "VA_CRDIE" + StrZero(nCrAux,2))))
	    AAdd(aCrDBs, &("U_CORROTA(" + GETMV("VA_CRDIE" + StrZero(nCrAux,2)) + ")")) //01 // 077, 074, 060
        AAdd(aCrDBR, ALLTRIM(GETMV("VA_CRDIE" + StrZero(nCrAux,2))) ) //01 // 077, 074, 060
        nCrAux++
    EndDo

    DBSelectArea("ZRT")
    ZRT->(DBSetOrder(1))
    ZRT->(DBGoTop())

    While (!(ZRT->(EOF())))
        If (aScan(aRot , { |x| x[1] == ZRT->ZRT_ROTA }) < 1)
    		AAdd(aRot, {ZRT->ZRT_ROTA, &("U_CORROTA(" + ZRT->ZRT_COR + ")"),Alltrim(ZRT->ZRT_COR)})
            AAdd(aRotCmb, ZRT->ZRT_ROTA)
        EndIf
        ZRT->(DBSkip())
    EndDo

    DBSelectArea("Z05")
    Z05->(DBSetOrder(1))
    If (!Z05->(DBSeek(xFilial("Z05") + DTOS(aDadSel[2]) + aDadSel[3])))
        
        If (MsgYesNo("Nao foi identificado nenhum trato para a data " + DTOC(aDadSel[2]) + ". Deseja criar?", "Trato nao encontrado."))
            FWMsgRun(, { || U_CriaTrato(aDadSel[2])}, "Geracao de trato", "Gerando trato para o dia " + DTOC(aDadSel[2]) + "...")
            if (!Z05->(DBSeek(xFilial("Z05") + DTOS(aDadSel[2]) + aDadSel[3])))
                nOpcRotas := 0
                Return (Nil)
            endif
        Else
            Help(,,"SELECAO DE TRATO",/**/,"Nao existe trato para o dia " + DTOC(aDadSel[2]) + ". ", 1, 1,,,,,.F.,{"Por favor, crie o trato para prosseguir." })
            nOpcRotas := 0
            Return (Nil)
        EndIf
    EndIf
    
    if !Empty(aArea)
		RestArea(aArea)
	endif

    cQry := " SELECT DISTINCT Z08.Z08_CONFNA AS CONF, Z08.Z08_TIPO AS TIPO, Z08.Z08_CODIGO, Z08.Z08_LINHA AS LINHA, Z08.Z08_SEQUEN AS SEQ " + CRLF
    cQry += "      , ISNULL(SB8.B8_LOTECTL, 'SEM LOTE') AS LOTE, Z05.Z05_CABECA AS QUANT, (SELECT MAX(Z0M1.Z0M_VERSAO) FROM " + RetSqlName("Z0M") + " Z0M1 WHERE Z0M1.Z0M_CODIGO = Z0O.Z0O_CODPLA AND Z0M1.D_E_L_E_T_ = ' ') AS PLANO " + CRLF
    cQry += "      , DATEDIFF(day, (SELECT MIN(SB8A.B8_XDATACO) FROM " + RetSqlName("SB8") + " SB8A WHERE SB8A.B8_LOTECTL = SB8.B8_LOTECTL AND SB8A.B8_FILIAL = '" + xFilial("SB8") + "' AND SB8A.B8_SALDO > 0 AND SB8A.D_E_L_E_T_ <> '*'),  GETDATE()) AS DIAS " + CRLF //DATEDIFF(day, SB8.B8_XDATACO,  GETDATE()) AS DIAS, 
    cQry += "      --, Z05.Z05_DIETA AS DIETA " + CRLF
    cQry += "      , Z0R.Z0R_DATA AS DTTRT, Z0R.Z0R_VERSAO AS VERSAO, Z0T.Z0T_ROTA AS ROTA " + CRLF 
    cQry += "      , (SELECT DISTINCT(SB1.B1_DESC) FROM " + RetSqlName("SB1") + " SB1 WHERE SB1.B1_COD = Z05.Z05_DIETA) AS DIEDSC " + CRLF //AND Z06.Z06_CURRAL = Z08.Z08_CODIGO
    cQry += "      , Z05_DIETA DIETA" + CRLF
    cQry += "      , (SELECT COUNT(Z06.Z06_TRATO)  FROM " + RetSqlName("Z06") + " Z06 WHERE Z06.D_E_L_E_T_ <> '*' AND Z06.Z06_FILIAL = '" + xFilial('Z06') + "' AND Z06.Z06_DATA = Z0R.Z0R_DATA AND Z06.Z06_VERSAO = Z0R.Z0R_VERSAO AND Z06.Z06_LOTE = SB8.B8_LOTECTL) AS NRTRT " + CRLF
    cQry += "      , (SELECT SUM(Z04.Z04_TOTREA)   FROM " + RetSqlName("Z04") + " Z04 WHERE Z04.Z04_DTIMP  = DATEADD(dd, -1, cast('" + DTOS(aDadSel[2]) + "' as datetime)) AND Z04.Z04_FILIAL = '" + xFilial('Z04') + "' AND Z04.D_E_L_E_T_ <> '*' AND Z04.Z04_LOTE = SB8.B8_LOTECTL) AS Z04_TOTREA " + CRLF
    cQry += "      , (SELECT Z05A.Z05_KGMNDI FROM " + RetSqlName("Z05") + " Z05A WHERE Z05A.Z05_DATA = DATEADD(DAY, -1, Z0R.Z0R_DATA) AND Z05A.Z05_VERSAO = Z0R.Z0R_VERSAO AND Z05A.Z05_LOTE = SB8.B8_LOTECTL AND Z05A.Z05_FILIAL = '" + xFilial("Z05") + "' AND Z05A.D_E_L_E_T_ <> '*') AS KGMN " + CRLF
    cQry += "      , (SELECT Z05A.Z05_KGMSDI FROM " + RetSqlName("Z05") + " Z05A WHERE Z05A.Z05_DATA = DATEADD(DAY, -1, Z0R.Z0R_DATA) AND Z05A.Z05_VERSAO = Z0R.Z0R_VERSAO AND Z05A.Z05_LOTE = SB8.B8_LOTECTL AND Z05A.Z05_FILIAL = '" + xFilial("Z05") + "' AND Z05A.D_E_L_E_T_ <> '*') AS KGMS " + CRLF
    cQry += "      , (SELECT Z05A.Z05_KGMNDI FROM " + RetSqlName("Z05") + " Z05A WHERE Z05A.Z05_DATA = Z0R.Z0R_DATA AND Z05A.Z05_VERSAO = Z0R.Z0R_VERSAO AND Z05A.Z05_LOTE = SB8.B8_LOTECTL AND Z05A.Z05_FILIAL = '" + xFilial("Z05") + "' AND Z05A.D_E_L_E_T_ <> '*') AS KGMNDIA " + CRLF
    cQry += "      , (SELECT Z05A.Z05_KGMSDI FROM " + RetSqlName("Z05") + " Z05A WHERE Z05A.Z05_DATA = Z0R.Z0R_DATA AND Z05A.Z05_VERSAO = Z0R.Z0R_VERSAO AND Z05A.Z05_LOTE = SB8.B8_LOTECTL AND Z05A.Z05_FILIAL = '" + xFilial("Z05") + "' AND Z05A.D_E_L_E_T_ <> '*') AS KGMSDIA " + CRLF
    cQry += " FROM " + RetSqlName("Z08") + " Z08 " + CRLF
    cQry += " LEFT JOIN " + RetSqlName("SB8") + " SB8 ON SB8.B8_X_CURRA = Z08.Z08_CODIGO AND SB8.B8_FILIAL = '" + xFilial("SB8") + "' AND SB8.D_E_L_E_T_ <> '*' AND SB8.B8_SALDO > 0 " + CRLF
    cQry += " LEFT JOIN " + RetSqlName("Z0O") + " Z0O ON Z0O.Z0O_LOTE = SB8.B8_LOTECTL AND ('" + DTOS(aDadSel[2]) + "' BETWEEN Z0O.Z0O_DATAIN AND Z0O.Z0O_DATATR OR (Z0O.Z0O_DATAIN <= '" + DTOS(aDadSel[2]) + "' AND Z0O.Z0O_DATATR = '        ')) AND Z0O.Z0O_FILIAL = '" + xFilial("Z0O") + "' AND Z0O.D_E_L_E_T_ <> '*' " + CRLF
    cQry += " LEFT JOIN " + RetSqlName("Z0R") + " Z0R ON Z0R.Z0R_DATA = '" + DTOS(aDadSel[2]) + "' AND Z0R.Z0R_VERSAO = '" + aDadSel[3] + "' AND Z0R.Z0R_FILIAL = '" + xFilial("Z0R") + "' AND Z0R.D_E_L_E_T_ <> '*' " + CRLF
    cQry += " LEFT JOIN " + RetSqlName("Z05") + " Z05 ON Z05.Z05_DATA = Z0R.Z0R_DATA AND Z05.Z05_VERSAO = Z0R.Z0R_VERSAO AND Z05.Z05_LOTE = SB8.B8_LOTECTL AND Z05.Z05_FILIAL = '" + xFilial("Z05") + "' AND Z05.D_E_L_E_T_ <> '*' " + CRLF //AND Z05.Z05_CURRAL = SB8.B8_X_CURRA
    cQry += " LEFT JOIN " + RetSqlName("Z0T") + " Z0T ON Z0T.Z0T_DATA = Z0R.Z0R_DATA AND Z0T.Z0T_VERSAO = Z0R.Z0R_VERSAO AND Z0T.Z0T_CURRAL = Z08_CODIGO AND Z0T.Z0T_FILIAL = '" + xFilial("Z0T") + "' AND Z0T.D_E_L_E_T_ <> '*' " + CRLF //Z0T.Z0T_LINHA = Z08.Z08_LINHA AND Z0T.Z0T_SEQUEN = Z08.Z08_SEQUEN
    cQry += " WHERE Z08.D_E_L_E_T_ <> '*' " + CRLF
    cQry += "   AND Z08.Z08_FILIAL = '" + xFilial("Z08") + "' AND Z08.Z08_CONFNA <> '' " + CRLF
    cQry += "   AND Z08.Z08_MSBLQL <> '1' " + CRLF
    cQry += IIf(!lShwZer, " AND SB8.B8_SALDO > 0 ", "") + CRLF
    cQry += " GROUP BY Z08.Z08_CONFNA, Z08.Z08_TIPO, Z08.Z08_CODIGO, Z08.Z08_LINHA, Z08.Z08_SEQUEN, SB8.B8_LOTECTL, Z05.Z05_CABECA, Z0O.Z0O_CODPLA, Z05.Z05_DIETA, Z05.Z05_KGMNDI, Z05.Z05_KGMSDI, Z0R.Z0R_DATA, Z0R.Z0R_VERSAO, Z0T.Z0T_ROTA, Z05_FILIAL, Z05_VERSAO, Z05_DATA, Z05_LOTE" + CRLF //SB8.B8_XDATACO,
    cQry += " ORDER BY Z08.Z08_TIPO, Z08.Z08_CONFNA, Z08.Z08_LINHA, Z08.Z08_SEQUEN, Z08.Z08_CODIGO " + CRLF

    MEMOWRITE("C:\TOTVS_RELATORIOS\vaPCPa09_ROTAMAIN.SQL", cQry)

    cAlias := MpSysOpenQuery(cQry)

    cBakLin := ""
    nLinha  := 0
    nColuna := 0

    oLayout:= tGridLayout():New(oPanel,CONTROL_ALIGN_ALLCLIENT,0,0)
    oLayout:SetCSS("QWidget { background-color: RGB(255, 255, 255);}")

    While !(cAlias)->(EOF())
        if (cAlias)->CONF == '01'
            if cBakLin != (cAlias)->LINHA
                cBakLin := (cAlias)->LINHA
                
                if nLinha == 0
                    nLinha := 1
                else
                    nLinha := nLinha + 3
                endif
                nColuna := 1

				oPanel1 := nil 
                oPanel1:= TPanelCss():New(01,01,nil,oLayout,nil,nil,nil,nil,nil,40,15,nil,nil)
                oPanel1:SetCSS("QWidget { background-color: RGB(255, 25, 255);}")
        
                oLayout:addInLayout(oPanel1, nLinha, nColuna, , ,LAYOUT_ALIGN_VCENTER)

				oPanel1 := nil
                oPanel1:= TPanelCss():New(01,01,(cAlias)->LINHA,oLayout,oTFntGr,nil,nil,nil,nil,40,40,nil,nil)
                oPanel1:SetCSS("QWidget { background-color: RGB(136, 49, 255);}")
                
                oLayout:addInLayout(oPanel1, nLinha+1, nColuna, , ,LAYOUT_ALIGN_VCENTER)

				oPanel1 := nil
                oPanel1:= TPanelCss():New(01,01,nil,oLayout,nil,nil,nil,nil,nil,40,15,nil,nil)
                oPanel1:SetCSS("QWidget { background-color: RGB(255, 25, 255);}")
        
                oLayout:addInLayout(oPanel1, nLinha, ++nColuna, , ,LAYOUT_ALIGN_VCENTER)

				oPanel1 := nil
                oPanel1:= TPanelCss():New(01,01,(cAlias)->LINHA,oLayout,oTFntGr,nil,nil,nil,nil,40,40,nil,nil)
                oPanel1:SetCSS("QWidget { background-color: RGB(136, 49, 255);}")
                
                oLayout:addInLayout(oPanel1, nLinha+1, nColuna, , ,LAYOUT_ALIGN_VCENTER)

            else

				oTButton := nil 
                oTButton := TButton():New( 0, 0, (cAlias)->Z08_CODIGO, oLayout,{||alert("Botão 01")}, 40,15,,,.F.,.T.,.F.,,.F.,,,.F. )
                oTButton:SetCSS("QWidget { background-color: RGB(255, 165, 215);}")
                
                oLayout:addInLayout(oTButton, nLinha, ++nColuna, , ,LAYOUT_ALIGN_VCENTER)

				oPanel1 := nil
                oPanel1:= TPanelCss():New(01,01,(cAlias)->Z08_CODIGO,oLayout,oTFntGr,nil,nil,nil,nil,40,40,nil,nil)
                oPanel1:SetCSS("QWidget { background-color: RGB(136, 49, 255);}")
                
                oLayout:addInLayout(oPanel1, nLinha+1, nColuna, , ,LAYOUT_ALIGN_VCENTER)

            endif

        endif

        (cAlias)->(dbSkip())
    enddo
    nPos := 3
    While nPos < nLinha
        oLayout:AddSpacer(nPos, , 1)
        nPos += 3
    endDO
return nil
