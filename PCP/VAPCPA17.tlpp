

#INCLUDE "TOTVS.CH"
#INCLUDE "TLPP-CORE.TH"
#INCLUDE "FWMVCDEF.CH"
#INCLUDE 'FWEDITPANEL.CH'
#INCLUDE "POSCSS.CH"

namespace custom.VAPCPA17

static aCpoMdRot  := { "Z0T_ROTA"	,"Z06_TRATO","Z06_KGMNT"}
static aCpoMdZ06G := { "Z06_LOTE"	,"Z05_CURRAL","Z06_DIETA" ,"Z05_CABECA","Z05_DIASDI","Z05_PESOCO","Z05_TOTMSC","Z05_TOTMNC","Z05_RECNO","Z0T_ROTA"}
static aCpoMdZ06D := { "Z06_TRATO"	,"Z06_LOTE"	,"Z06_DIETA" ,"Z06_KGMSTR","Z06_KGMNTR","Z06_MEGCAL","Z06_KGMNT" ,"Z06_RECNO" }
static aCpoMdZ05G := { "Z05_DATA"	,"Z05_DIETA","Z05_KGMSDI","Z0I_NOTMAN","Z0I_NOTTAR","Z05_CABECA","Z05_MEGCAL","Z05_KGMNDI","Z0W_QTDPRE","Z0W_QTDREA","XX1_DIF"}
static aCpoMdRt1  := { "Z0S_EQUIP"  ,"ZV0_DESC" ,"Z0T_ROTA", "Z06_LOTE","Z06_CURRAL"}

/*/{Protheus.doc} VAPCPA17
Rotina será usada na chamada <F4> da rotina VAPCPA05

@sample custom.naturezas.u_crudSED()
@author Dan M
@since 12/03/2025
@version 1.0
/*/
USER FUNCTION VAPCPA17()
	Private oBrowse as object
	Private oCurral, oQtdCabeca, oDiasDeCocho, oCMSPV,;
			oPesoMInicial, oTotMsCalc, oTotMnCal as object
	Private oExecZ05C  as object
	Private oExecZ05G  as object
	Private oExecRotaG as object
	Private oExecRotaD as object
	Private oExecZ06D  as object
	Private oExecZ06G  as object

	u_PreparaQuerys()
	
	oBrowse := FWLoadBrw("custom.VAPCPA17.VAPCPA17")
	oBrowse:Activate()
	oBrowse:DeActivate()
	oBrowse:Destroy()
	FreeObj(oBrowse)
	oBrowse := nil

	if oExecZ06G != nil
		oExecZ06G:Destroy()
		oExecZ06G := Nil
	endif
	if oExecZ06D != nil
		oExecZ06D:Destroy()
		oExecZ06D := Nil
	endif
	if oExecRotaD != nil
		oExecRotaD:Destroy()
		oExecRotaD := Nil
	endif
	if oExecRotaG != nil
		oExecRotaG:Destroy()
		oExecRotaG := Nil
	endif
	if oExecZ05C != nil
		oExecZ05C:Destroy()
		oExecZ05C := Nil
	endif
	if oExecZ05G != nil
		oExecZ05G:Destroy()
		oExecZ05G := Nil
	endif
Return
/*/
{Protheus.doc} BrowseDef
Retorna o browse da rotina
@return oBrowse Objeto do tipo FWMBrowse(FWBrowse)
@author Igor Oliveira
@version 1.0
/*/
//-----------------
user function BrowseDef() as object
	local oBrowse as object

	oBrowse := FWMBrowse():New()
	oBrowse:SetAlias("Z05")
	oBrowse:SetDescription("MVC TLPP - Tabela SED | User Function")

return oBrowse

user function ModelDef() as object
	local oModel   := nil as object
	local oStrZ06G := Z06GrdMStr(1) as object
	local oStrZ06D := Z06GrdMStr(2) as object
	local oStrZ05G := Z05GrdMStr()  as object
	local oStrRotD := RotGrdMStr(1) as object
	local oStrRotG := RotGrdMStr(2) as object
    local oStrHide := HidGrdMStr()	as object
    local oStrRt1  := Rt1GrdMStr()	as object

	local bLoadRt1    := {|oModel, lCopia| LoadRt1(oModel, lCopia) } as codeblock
	local bLoadRotD   := {|oModel, lCopia| LoadRotD(oModel, lCopia) } as codeblock
	local bLoadRotG   := {|oModel, lCopia| LoadRotG(oModel, lCopia) } as codeblock
	local bLoadHide   := {|oModel, lCopia| LoadHide(oModel, lCopia) } as codeblock
	local bLoadZ05G   := {|oModel, lCopia| LoadZ05G(oModel, lCopia) } as codeblock
	local bLoadZ06G   := {|oModel, lCopia| LoadZ06G(oModel, lCopia) } as codeblock
	local bLoadZ06D   := {|oModel, lCopia| LoadZ06D(oModel, lCopia) } as codeblock
	
	local bCommitGeral := {|| CommitGeral()}
	local bValidGeral  := {|oModel| ValidGeral(oModel)}
	
	Local aRelacao		:= {} as array
	Local aGatilhos		:= {} as array
	Local nI as Numeric

	aAdd(aGatilhos, FWStruTrigger( "XX1_EQUIP"  , "XX1_EQUIP"   ,"custom.VAPCPA17.U_RefreshRotaVAPCPA17()",.F.,"",,"",NIL,"01"))

	For nI := 1 To Len(aGatilhos)
		oStrHide:AddTrigger(  aGatilhos[nI][01],; //Campo Origem
						    aGatilhos[nI][02],; //Campo Destino
						    aGatilhos[nI][03],; //Bloco de código na validação da execução do gatilho
						    aGatilhos[nI][04])  //Bloco de código de execução do gatilho
	Next

	oModel := MPFormModel():New( "A17VAPCP", /*bPre*/ , bValidGeral/*bPos*/, bCommitGeral/*bCommit*/, /* Fechatela()  */)
	oModel:SetDescription("Plano de Trato")
	
    oModel:AddFields("MdFieldRota" ,""           , oStrHide,/*bPreValid*/		,/* bPosValid */, bLoadHide)
    oModel:AddGrid("MdGridRotaG"   ,"MdFieldRota", oStrRotG,/* bBlocoAtu */		,/* bLineROT *//*bLinePost*/,/*bPre */,/*bPost*/, bLoadRotG)
    oModel:AddGrid("MdGridRotaD"   ,"MdGridRotaG", oStrRotD,/*bLinePre*/		,/* bLineROT *//*bLinePost*/,/*bPre */,/*bPost*/, bLoadRotD)
    oModel:AddGrid("MdGridZ06G"    ,"MdGridRotaG", oStrZ06G,/* {|| ValidZ06g(1)} *//* bZ06LinePr */,/* {|| ValidZ06g(2)} *//* bZ06LinePo */,/* bZ06PreD */,/*bPost*/, bLoadZ06G)
    oModel:AddGrid("MdGridZ06D"    ,"MdGridZ06G" , oStrZ06D,/* {|| ValidZ06g(3)} *//* bZ06LinePr */	,/* {|| ValidZ06g(4)} */ /* bZ06LinePo */,/* bZ06PreD */,/*bPost*/, bLoadZ06D)
    oModel:AddGrid("MdGridZ05G"    ,"MdGridZ06G" , oStrZ05G,/* {|| ValidZ06g(7)} *//* bZ06LinePr */	,/* {|| ValidZ06g(8)} *//* bZ06LinePo */,/* bZ06PreD */,/*bPost*/, bLoadZ05G)
    oModel:AddGrid("MdFieldRt1"    ,"MdGridZ06G" , oStrRt1,/* {|| ValidZ06g(7)} *//* bZ06LinePr */	,/* {|| ValidZ06g(8)} *//* bZ06LinePo */,/* bZ06PreD */,/*bPost*/, bLoadRt1)
    //oModel:AddGrid("MdFieldRt1"  ,"MdGridZ06G" , oStrRt1 ,/*bPreValid*/		,/* bPosValid */, bLoadRt1)

	aRelacao := {}
	aAdd(aRelacao, {'Z06_LOTE', 'Z06_LOTE'} )
	oModel:SetRelation('MdFieldRt1', aRelacao/* , Z0T->(IndexKey(1)) */)

	aRelacao := {}
	aAdd(aRelacao, {'XX1_EQUIP', 'Z0S_EQUIP'} )
	oModel:SetRelation('MdGridRotaD', aRelacao/* , Z0T->(IndexKey(1)) */)
	
	aRelacao := {}
	aAdd(aRelacao, {'Z0T_ROTA', 'Z0T_ROTA'} )
	oModel:SetRelation('MdGridRotaD', aRelacao/* , Z0T->(IndexKey(1)) */)

	aRelacao := {}
	aAdd(aRelacao, {'Z0T_ROTA', 'Z0T_ROTA'} )
	oModel:SetRelation('MdGridZ06G', aRelacao, Z06->(IndexKey(1)))

	aRelacao := {}
	aAdd(aRelacao, {'Z06_LOTE', 'Z06_LOTE'} )
	oModel:SetRelation('MdGridZ06D', aRelacao, Z06->(IndexKey(1)))

	aRelacao := {}
	aAdd(aRelacao, {'Z06_LOTE'  , 'Z05_LOTE'} )
	oModel:SetRelation('MdGridZ05G', aRelacao/* , Z05->(IndexKey(1)) */)

    oModel:GetModel("MdFieldRt1"):SetDescription("Seleção atual")
	oModel:GetModel("MdGridZ06G"):SetDescription("Lista de Currais")
	oModel:GetModel("MdGridZ06D"):SetDescription("Relação de Tratos")
    oModel:GetModel("MdGridRotaD"):SetDescription("Total por Rota e Trato")
    oModel:GetModel("MdGridRotaG"):SetDescription("Rotas")
    oModel:GetModel("MdGridZ05G"):SetDescription("Programação anterior")
    oModel:GetModel("MdFieldRota"):SetDescription("CAB_ROTAS")

	oModel:SetPrimaryKey({})

    oModel:GetModel('MdFieldRt1' ):SetOnlyView(.T.)
    oModel:GetModel('MdGridRotaG' ):SetOnlyView(.T.)
    oModel:GetModel('MdGridRotaD' ):SetOnlyView(.T.)
    oModel:GetModel('MdGridZ05G' ):SetOnlyView(.T.)
    oModel:GetModel('MdGridZ05G'):SetOnlyQuery(.T.)
    oModel:GetModel('MdGridZ06G' ):SetOnlyView(.T.)

	oModel:getModel("MdGridRotaG"):SetNoInsertLine(.T.)
    oModel:getModel("MdGridRotaG"):SetNoDeleteLine(.T.)

	oModel:getModel("MdGridRotaD"):SetNoInsertLine(.T.)
    oModel:getModel("MdGridRotaD"):SetNoDeleteLine(.T.)
	
	oModel:getModel("MdGridZ06G"):SetNoInsertLine(.T.)
    oModel:getModel("MdGridZ06G"):SetNoDeleteLine(.T.)

	oModel:getModel("MdGridZ06D"):SetNoInsertLine(.T.)
	oModel:getModel("MdGridZ06D"):SetNoInsertLine(.T.)
    
	oModel:getModel("MdGridZ05G"):SetNoInsertLine(.T.)
	oModel:getModel("MdGridZ05G"):SetNoDeleteLine(.T.)

    oModel:AddCalc('TOTAIS1', 'MdGridRotaG', 'MdGridZ06G' , 'Z05_CABECA', 'XX1_CABECA' 	, 'SUM'		, , , "Cabeças" )
    oModel:AddCalc('TOTAIS1', 'MdGridRotaG', 'MdGridZ06G' , 'Z05_CABECA', 'XX1_COUNT' 	, 'COUNT'	, , , "Qtd de lotes" )
    //oModel:AddCalc('TOTAIS1', 'MdFieldRota', 'MdGridRotaG', 'ZV0_DESC'	, 'XX1_DESC' 	, 'SUM'		, , , "Caminhão" )
    
	oModel:AddCalc('TOTAIS2', 'MdGridZ06G', 'MdGridZ06D', 'Z06_KGMSTR', 'XX2_KGMSTR', 'SUM', , , "KG Mat Seca"   	)
	oModel:AddCalc('TOTAIS2', 'MdGridZ06G', 'MdGridZ06D', 'Z06_KGMNTR', 'XX2_KGMNTR', 'SUM', , , "KG Mat Natur"   	)
	oModel:AddCalc('TOTAIS2', 'MdGridZ06G', 'MdGridZ06D', 'Z06_MEGCAL', 'XX2_MEGCAL', 'SUM', , , "Mega Caloria"   	)
	oModel:AddCalc('TOTAIS2', 'MdGridRotaG', 'MdGridZ06G', 'Z05_CABECA', 'XX2_CABECA', 'SUM', , , "Cabeças"   		)
	oModel:AddCalc('TOTAIS2', 'MdGridRotaG', 'MdGridZ06G', 'Z05_TOTMSC' , 'XX2_TOTMSC', 'SUM', , , "KG Mat Calc Ant")
	
	oModel:AddCalc('TOTAIS3', 'MdGridRotaG', 'MdGridRotaD', 'Z06_KGMNT' , 'XX3_KGMNT', 'SUM', , , "KG Mn Total" 	)
	
	oModel:SetOptional("MdFieldRt1" , .T.)
	oModel:SetOptional("MdGridZ05G"	, .T.)
	oModel:SetOptional("MdGridZ06G"	, .T.)
	oModel:SetOptional("MdGridZ06D"	, .T.)
	oModel:SetOptional("MdGridRotaD", .T.)
	oModel:SetOptional("MdGridRotaG", .T.)

return oModel

user function ViewDef() as object
	local oView 	as object

	local oStrRt1   := nil as object
	local oStrZ05G  := nil as object
    local oStrZ06G 	:= nil as object
    local oStrZ06D 	:= nil as object
	local oStrRotD  := nil as object
	local oStrRotG  := nil as object
    local oStrHide 	:= nil as object
	local oStrTot1  := nil as object
	local oStrTot2  := nil as object

	//if IsInCallStack("U_VAPCPA05") .or. !Empty((cTrbBrowse)->B8_LOTECTL)
		
		oModel 	:= FwLoadModel("custom.VAPCPA17.VAPCPA17")

		oStrZ05G   	:= Z05GrdVStr()
		oStrRotD 	:= ROTGrdVStr(1)
		oStrRotG 	:= ROTGrdVStr(2)
		oStrHide 	:= HidGrdVStr()
    	oStrZ06G    := Z06GrdVStr(1)
    	oStrZ06D    := Z06GrdVStr(2)
    	oStrRt1     := Rt1GrdVStr()
		oStrTot1 	:= FWCalcStruct(oModel:GetModel('TOTAIS1' ))
		oStrTot2 	:= FWCalcStruct(oModel:GetModel('TOTAIS2' ))
		oStrTot3 	:= FWCalcStruct(oModel:GetModel('TOTAIS3' ))

		oView 	:= FwFormView():New()
		oView:SetModel(oModel)
		
		oView:AddField("VwFieldRotas"	, oStrHide 	, "MdFieldRota"	)
		oView:AddGrid("VwFieldPos" 	, oStrRt1   , "MdFieldRt1"  )
		oView:AddGrid("VwGridZ05G" 	, oStrZ05G 	, "MdGridZ05G"	)
		oView:AddGrid("VwGridZ06G" 	, oStrZ06G 	, "MdGridZ06G"	)
		oView:AddGrid("VwGridZ06D" 	, oStrZ06D 	, "MdGridZ06D"	)
		oView:AddGrid("VwGridROTG" 	, oStrRotG  , "MdGridRotaG"	)
		oView:AddGrid("VwGridROTD" 	, oStrRotD  , "MdGridRotaD"	)
		oView:AddField("VwKgTot1" 	, oStrTot1  , "TOTAIS1" )
		oView:AddField("VwKgTot2" 	, oStrTot2  , "TOTAIS2" )
		oView:AddField("VwKgTot3" 	, oStrTot3  , "TOTAIS3" )

		oView:CreateHorizontalBox("CAB_ROTAS"   , 0)
		oView:CreateHorizontalBox("ITENS"       , 100)

		oView:CreateVerticalBox("ROTAS",  15, "ITENS")
		oView:CreateVerticalBox("PROGR",  45, "ITENS")
		oView:CreateVerticalBox("LOTES",  40, "ITENS")

		oView:CreateHorizontalBox("PROGR_CIMA"  , 80, "PROGR")
		oView:CreateHorizontalBox("PROGR_BAIXO" , 20, "PROGR")
		
		oView:CreateVerticalBox("PROGR_BAIXO_ESQ",  40, "PROGR_BAIXO")
		oView:CreateVerticalBox("PROGR_BAIXO_DIR",  60, "PROGR_BAIXO")

		oView:CreateHorizontalBox("ROTAS_CIMA" , 40, "ROTAS")
		oView:CreateHorizontalBox("ROTAS_MEIO" , 40, "ROTAS")
		oView:CreateHorizontalBox("ROTAS_BAIXO", 20, "ROTAS")

		oView:CreateHorizontalBox("LOTES_CIMA"  , 40, "LOTES")
		oView:CreateHorizontalBox("LOTES_CENTER", 20, "LOTES")
		oView:CreateHorizontalBox("LOTES_BAIXO" , 40, "LOTES")
		
		oView:SetOwnerView("VwFieldRotas"  	, "CAB_ROTAS"	)
		oView:SetOwnerView("VwGridROTG"  	, "ROTAS_CIMA"  )
		oView:SetOwnerView("VwGridROTD"  	, "ROTAS_MEIO"  )
		oView:SetOwnerView("VwKgTot3"  		, "ROTAS_BAIXO" )
		oView:SetOwnerView("VwGridZ06G"  	, "PROGR_CIMA"  )
		oView:SetOwnerView("VwGridZ06D"  	, "LOTES_CIMA"  )
		oView:SetOwnerView("VwKgTot2" 		, "LOTES_CENTER")
		oView:SetOwnerView("VwGridZ05G" 	, "LOTES_BAIXO" )
		oView:SetOwnerView("VwKgTot1"    	, "PROGR_BAIXO_ESQ"	)
		oView:SetOwnerView("VwFieldPos"    	, "PROGR_BAIXO_DIR"	)
	
		oView:SetNoInsertLine("VwGridZ06G")
		oView:SetNoDeleteLine("VwGridZ06G")

		oView:SetNoInsertLine("VwGridZ06D")
		oView:SetNoDeleteLine("VwGridZ06D")

		oView:SetNoInsertLine("VwGridROTD")
		oView:SetNoDeleteLine("VwGridROTD")

		oView:SetNoInsertLine("VwGridROTG")
		oView:SetNoDeleteLine("VwGridROTG")

		oView:EnableTitleView('VwGridROTD' 	, "Total por Rota e Trato"	)
		oView:EnableTitleView('VwGridROTG' 	, "Rotas"					)
		oView:EnableTitleView('VwGridZ06G'	, "Lista de Currais"		)
		oView:EnableTitleView('VwGridZ06D'	, "Relação de Tratos"		)
		oView:EnableTitleView('VwFieldRotas', "Seleção de Rotas"		)
		oView:EnableTitleView('VwKgTot3'	, "Total da rota"			)
		oView:EnableTitleView('VwKgTot2'	, "Totais por Lote"			)
		oView:EnableTitleView('VwGridZ05G'	, "Programação anterior"	)
		oView:EnableTitleView('VwKgTot1'   	, "Totais por Rota"			)
		oView:EnableTitleView('VwFieldPos'  , "Seleção atual"			)

		//oView:SetViewProperty("VwGridROTG", "SETLAYOUT", {FF_LAYOUT_HORZ_DESCR_TOP ,1} )

		//oView:SetViewProperty("VwGridROTG", "ENABLENEWGRID")
		//oView:SetViewProperty("VwGridROTG", "SETCSS", {POSCSS("TGRID", CSS_BROWSE_HEADER_LEFT)} )
		oView:SetViewProperty("VwGridROTG", "SETCSS", {"QTableView { selection-background-color: #1C9DBD; }"} )
		oView:SetViewProperty("VwGridROTD", "SETCSS", {"QTableView { selection-background-color: #1C9DBD; }"} )
		oView:SetViewProperty("VwGridZ06G", "SETCSS", {"QTableView { selection-background-color: #1C9DBD; }"} )

		if Inclui .or. Altera
			oView:AddUserButton( "Atualizar" , 'OK', {|| AtualizaTela() } )
			oView:AddUserButton( "Nro Tratos", 'OK', {|| vap17tra() } )
			oView:AddUserButton( "Dietas"	 , 'OK', {|| vap17trt() } )
		endif
	//else
    //	Help(/*Descontinuado*/,/*Descontinuado*/,"SEM LOTE",/**/,"Não existe lote vinculado ao curral.", 1, 1,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,.F.,{"Não é possível atribuir um trato ao curral selecionado."})
	//endif

return oView
user function MenuDef() as array
	local aRotina := {} as array

	Add Option aRotina Title "Alterar" Action "ViewDef.custom.VAPCPA17.VAPCPA17" Operation MODEL_OPERATION_UPDATE Access 0

return aRotina

User Function A17VAPCP()
    Local aParam   := PARAMIXB // PARÂMETROS PASSADOS PARA O PONTO
    Local xRet     := .T.      // RETORNO LÓGICO PARA PROSSEGUIMENTO DA ROTINA
    Local oObj     := NIL      // OBJETO QUE ARMAZENARÁ O MODELO TOTAL
    Local cIdPonto := Space(0) // ID DO MOMENTO DA CHAMADA DO PONTO

    // CERTIFICA-SE QUE EXISTEM PARÂMETROS PARA O MOMENTO
    If (!aParam == NIL)
        oObj     := aParam[1]
        cIdPonto := aParam[2]
        cIdModel := aParam[3]

        // VALIDAÇÃO ANTES DA ATIVAÇÃO DO MODELO
        If (cIdPonto == "MODELVLDACTIVE")
            //oObj:GetModel("MdGridZ06G"):GetStruct():SetProperty("*" , MODEL_FIELD_WHEN, FwBuildFeature(STRUCT_FEATURE_WHEN , ".F."))
        elseIf cIdPonto == 'FORMLINEPRE' .and. cIdModel == 'MdGridZ06G'
			xRet := .T.
        elseIf cIdPonto == 'MODELCANCEL'
   			FWMsgRun(, { || U_vap05rec(dDataBase) }, "Carregamento do trato", "Carregando trato")  
        EndIf
    EndIf
Return (xRet) // RETORNO LÓGICO PARA PROSSEGUIMENTO

//Função de commit só retorna .T., porque a rotina salva conforme altera os campos durante execução.
Static Function CommitGeral()
Return .T.

Static Function ValidGeral(oModel)
Return .T.

static function Rt1GrdMStr() AS Object
    local aArea   		:= GetArea() 
    local oStruct 		:= FWFormModelStruct():New() AS Object
	local nI 

	SX3->(DbSetOrder(2))
	
	For nI := 1 to Len(aCpoMdRt1)
		if SX3->(DbSeek(Padr(aCpoMdRt1[nI], Len(SX3->X3_CAMPO))))
			oStruct:AddField(;
							X3Titulo(),;              		// [01]  C   Titulo do campo
							X3Descric(),;              				// [02]  C   ToolTip do campo
							AllTrim(SX3->X3_CAMPO),;   				// [03]  C   Id do Field
							TamSX3(SX3->X3_CAMPO)[3],; 							// [04]  C   Tipo do campo
							TamSX3(SX3->X3_CAMPO)[1],; 							// [05]  N   Tamanho do campo
							TamSX3(SX3->X3_CAMPO)[2],; 							// [06]  N   Decimal do campo
							,;// [07]  B   Code-block de validação do campo
							nil,;                      	// [08]  B   Code-block de validação When do campo
							{},;      					// [09]  A   Lista de valores permitido do campo
							.F.,;                      	// [10]  L   Indica se o campo tem preenchimento obrigatório
							/* FwBuildFeature(STRUCT_FEATURE_INIPAD,   "'"+cZ0SEQUIP+"'"  ) */,;// [11]  B   Code-block de inicializacao do campo
							.F.,;                      	// [12]  L   Indica se trata-se de um campo chave
							.F.,;                      	// [13]  L   Indica se o campo NÃO pode receber valor em uma operação de update.
							.F.)                       	// [14]  L   Indica se o campo é virtual
		endif
	Next nI
	
	RestArea(aArea)
Return oStruct

static function Rt1GrdVStr() as Object
	local aArea   := GetArea() as Array
	local oStruct := FWFormViewStruct():New() as Object
		local nI 

	SX3->(DbSetOrder(2))
	aCpoMdRt1 := { "ZV0_DESC" ,"Z0T_ROTA", "Z06_LOTE","Z06_CURRAL"}
	For nI := 1 to Len(aCpoMdRt1)
		if SX3->(DbSeek(Padr(aCpoMdRt1[nI], Len(SX3->X3_CAMPO))))
			oStruct:AddField(;
				AllTrim(SX3->X3_CAMPO),;        // [01]  C   Nome do Campo
				StrZero(nI,Len(SX3->X3_ORDEM)),; 				// [02]  C   Ordem
				X3Titulo(),;           // [03]  C   Titulo do campo
				"",;                // [04]  C   Descricao do campo
				{"Help"},;          // [05]  A   Array com Help
				TamSX3(SX3->X3_CAMPO)[3],;      			// [06]  C   Tipo do campo
				"",;      			// [07]  C   Picture
				nil,;               // [08]  B   Bloco de PictTre Var
				,;                  // [09]  C   Consulta F3
				.f.,;  				// [10]  L   Indica se o campo é alteravel
				nil,;               // [11]  C   Pasta do campo
				nil,;               // [12]  C   Agrupamento do campo
				nil,;               // [13]  A   Lista de valores permitido do campo (Combo)
				nil,;               // [14]  N   Tamanho máximo da maior opção do combo
				nil,;               // [15]  C   Inicializador de Browse
				.t.,;               // [16]  L   Indica se o campo é virtual
				nil,;               // [17]  C   Picture Variável
				nil;                // [18]  L   Indica pulo de linha após o campo
			)
		ENDIF
	Next nI

	if !Empty(aArea)
		RestArea(aArea)
	endif
return oStruct

static function HidGrdMStr() AS Object
    local aArea   		:= GetArea() 
    local oStruct 		:= FWFormModelStruct():New() AS Object

    oStruct:AddField(;
                     "Caminhão",;              		// [01]  C   Titulo do campo
                     "",;              				// [02]  C   ToolTip do campo
                     "XX1_EQUIP",;   				// [03]  C   Id do Field
                     "C",; 							// [04]  C   Tipo do campo
                     6,; 							// [05]  N   Tamanho do campo
                     0,; 							// [06]  N   Decimal do campo
                     /* {|| U_RefreshRotaVAPCPA17()} */ ,;// [07]  B   Code-block de validação do campo
                     nil,;                      	// [08]  B   Code-block de validação When do campo
                     {},;      					// [09]  A   Lista de valores permitido do campo
                     .F.,;                      	// [10]  L   Indica se o campo tem preenchimento obrigatório
                     /* FwBuildFeature(STRUCT_FEATURE_INIPAD,   "'"+cZ0SEQUIP+"'"  ) */,;// [11]  B   Code-block de inicializacao do campo
                     .F.,;                      	// [12]  L   Indica se trata-se de um campo chave
                     .F.,;                      	// [13]  L   Indica se o campo NÃO pode receber valor em uma operação de update.
                     .F.)                       	// [14]  L   Indica se o campo é virtual
	
	RestArea(aArea)
Return oStruct

static function HidGrdVStr() as Object
	local aArea   := GetArea() as Array
	local oStruct := FWFormViewStruct():New() as Object
	
	oStruct:AddField(;
		"XX1_EQUIP",;        // [01]  C   Nome do Campo
		"1",; 				// [02]  C   Ordem
		"Caminhão",;           // [03]  C   Titulo do campo
		"",;                // [04]  C   Descricao do campo
		{"Help"},;          // [05]  A   Array com Help
		"C",;      			// [06]  C   Tipo do campo
		"",;      			// [07]  C   Picture
		nil,;               // [08]  B   Bloco de PictTre Var
		,;                  // [09]  C   Consulta F3
		.T.,;  				// [10]  L   Indica se o campo é alteravel
		nil,;               // [11]  C   Pasta do campo
		nil,;               // [12]  C   Agrupamento do campo
		nil,;               // [13]  A   Lista de valores permitido do campo (Combo)
		nil,;               // [14]  N   Tamanho máximo da maior opção do combo
		nil,;               // [15]  C   Inicializador de Browse
		.t.,;               // [16]  L   Indica se o campo é virtual
		nil,;               // [17]  C   Picture Variável
		nil;                // [18]  L   Indica pulo de linha após o campo
	)

	if !Empty(aArea)
		RestArea(aArea)
	endif
return oStruct

//Programação anterior
static function Z05GrdMStr() as object
	local aArea   	:= GetArea() as array
	local oStruct 	:= FWFormModelStruct():New() as object
	Local nLen, nI as Numeric

	DbSelectArea("SX3")
	DbSetOrder(2)  // X3_CAMPO

	nLen := Len(aCpoMdZ05G)

	for nI := 1 to nLen 
		if aCpoMdZ05G[nI]$"XX1_DIF"
            oStruct:AddField(;
                 "Diferença    ",;               // [01]  C   Titulo do campo
                 "Diferença",;  // [02]  C   ToolTip do campo
                 "XX1_DIF",;                  // [03]  C   Id do Field
                 "N",;                          // [04]  C   Tipo do campo
                  14,;                          // [05]  N   Tamanho do campo
                  0,;                           // [06]  N   Decimal do campo
                 nil,;                          // [07]  B   Code-block de validação do campo
                 NIL,;                          // [08]  B   Code-block de validação When do campo
                 nil,;                          // [09]  A   Lista de valores permitido do campo
                 .F.,;                          // [10]  L   Indica se o campo tem preenchimento obrigatório
                 nil,;                          // [11]  B   Code-block de inicializacao do campo
                 .F.,;                          // [12]  L   Indica se trata-se de um campo chave
                 .F.,;                          // [13]  L   Indica se o campo pode receber valor em uma operação de update.
                 .T.)                           // [14]  L   Indica se o campo é virtual
        else
            SX3->(DbSetOrder(2))
            if SX3->(DbSeek(Padr(aCpoMdZ05G[nI], Len(SX3->X3_CAMPO))))
                
				if Alltrim(SX3->X3_CAMPO) == "Z05_DIETA"
					nTamanho := 12
				else
					nTamanho := TamSX3(SX3->X3_CAMPO)[1]
				endif

				oStruct:AddField(X3Titulo(),;                   // [01]  C   Titulo do campo
                                 X3Descric(),;                  // [02]  C   ToolTip do campo
                                 AllTrim(SX3->X3_CAMPO),;       // [03]  C   Id do Field
                                 TamSX3(SX3->X3_CAMPO)[3],;     // [04]  C   Tipo do campo
                                 nTamanho				 ,;     // [05]  N   Tamanho do campo
                                 TamSX3(SX3->X3_CAMPO)[2],;     // [06]  N   Decimal do campo
                                 nil,; // [07]  B   Code-block de validação do campo
                                 FWBuildFeature(STRUCT_FEATURE_WHEN, ".F."),; // [08]  B   Code-block de validação When do campo
                                 Iif(!Empty(X3CBox()),StrToKArr(X3CBox(), ";"),nil),; // [09]  A   Lista de valores permitido do campo
                                 X3Obrigat(SX3->X3_CAMPO),;     // [10]  L   Indica se o campo tem preenchimento obrigatório
                                 nil,; // [11]  B   Code-block de inicializacao do campo
                                 .F.,;                          // [12]  L   Indica se trata-se de um campo chave
                                 ;//IIF(AllTrim(SX3->X3_CAMPO)$"Z06_MEGCAL|Z06_KGMSTR|Z06_KGMNTR|Z06_KGMNT",.F.,.T.),;//(SX3->X3_VISUAL == 'A'),;        // [13]  L   Indica se o campo pode receber valor em uma operação de update.
                                 .F.,;//(SX3->X3_VISUAL == 'A'),;        // [13]  L   Indica se o campo pode receber valor em uma operação de update.
                                 SX3->X3_CONTEXT == 'V')        // [14]  L   Indica se o campo é virtual
            else
                Help(/*Descontinuado*/,/*Descontinuado*/,"CAMPO NAO ENCONTRADO",/**/,"O campo " + aCpoMdZ05G[nI] + " não foi encontrado no banco de dados. ", 1, 1,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,.F.,{"Por favor, entre em contato com o TI." })
            endif
        endif
	Next nI 

	if !Empty(aArea)
		RestArea(aArea)
	endif
return oStruct
//Plano de trato
static function Z05FldMStr() as object
	local aArea   := GetArea() as array
	local oStruct := FWFormModelStruct():New() as object
	local cValid  	as Character
	local bValid  	as Character
	local bWhen   	as codeblock
	local aCbox	  	as array
	local bRelacao  as codeblock

	SX3->(DbSetOrder(1)) // X3_ARQUIVO + X3_ORDEM
	SX3->(DbSeek("Z0501"))

	while !SX3->(Eof()) .and. SX3->X3_ARQUIVO == 'Z05'
		if aScan(aCpoMdZ05F, {|aMat| AllTrim(aMat) == AllTrim(SX3->X3_CAMPO)}) > 0 
			//AAdd(aCpos, SX3->X3_CAMPO)
			cValid := Iif(!Empty(SX3->X3_VLDUSER), "(" + AllTrim(SX3->X3_VLDUSER) + ")", "") + Iif(!Empty(SX3->X3_VLDUSER).and.!Empty(SX3->X3_VALID), ".and.", "") + Iif(!EMpty(SX3->X3_VALID), "(" + AllTrim(SX3->X3_VALID) + ")", "")
			bValid := Iif(!Empty(cValid), FWBuildFeature(STRUCT_FEATURE_VALID, cValid), nil)
			bWhen := Iif(!Empty(SX3->X3_WHEN), FWBuildFeature(STRUCT_FEATURE_WHEN, SX3->X3_WHEN), nil)
			aCBox := Iif(!Empty(X3CBox()),StrToKArr(X3CBox(), ";"),nil)
			bRelacao := FwBuildFeature( STRUCT_FEATURE_INIPAD, "Iif(!Inclui," + SX3->X3_ARQUIVO + "->" + AllTrim(SX3->X3_CAMPO) + ",CriaVar('" + AllTrim(SX3->X3_CAMPO) + "',.T.))" )
			oStruct:AddField(;
				X3Titulo(),;               // [01]  C   Titulo do campo
				X3Descric(),;              // [02]  C   ToolTip do campo
				AllTrim(SX3->X3_CAMPO),;   // [03]  C   Id do Field
				TamSX3(SX3->X3_CAMPO)[3],; // [04]  C   Tipo do campo
				TamSX3(SX3->X3_CAMPO)[1],; // [05]  N   Tamanho do campo
				TamSX3(SX3->X3_CAMPO)[2],; // [06]  N   Decimal do campo
				nil/* bValid */,;                   // [07]  B   Code-block de validação do campo
				nil/* bWhen */,;                    // [08]  B   Code-block de validação When do campo
				nil/* aCBox */,;                    // [09]  A   Lista de valores permitido do campo
				.f./* X3Obrigat(SX3->X3_CAMPO) */,; // [10]  L   Indica se o campo tem preenchimento obrigatório
				nil/* bRelacao */,;                 // [11]  B   Code-block de inicializacao do campo
				.F.,;                      // [12]  L   Indica se trata-se de um campo chave
				.F.,;                      // [13]  L   Indica se o campo pode receber valor em uma operação de update.
				.F.)                       // [14]  L   Indica se o campo é virtual
		endif
		SX3->(DbSkip())
	end

	//ConOut("Z05FldMStr: " + u_AToS(aCpos))

	if !Empty(aArea)
		RestArea(aArea)
	endif
return oStruct

//Programação anterior
static function Z05GrdVStr() as Object
	local aArea   := GetArea() as Array
	local oStruct := FWFormViewStruct():New() as Object
	local nI      := 0  as Numeric

	DbSelectArea("SX3")
	DbSetOrder(2)  // X3_CAMPO
	
	nLen := Len(aCpoMdZ05G)
	for nI := 1 to nLen
		SX3->(DbSetOrder(2))
		if aCpoMdZ05G[nI]$"XX1_DIF"
			oStruct:AddField(;
				"XX1_DIF",;                   // [01]  C   Nome do Campo
				StrZero(nI,Len(SX3->X3_ORDEM)),; // [02]  C   Ordem
				"Diferença",;                // [03]  C   Titulo do campo
				"Diferença",;  // [04]  C   Descricao do campo
				{"Help"},;                      // [05]  A   Array com Help
				"N",;                           // [06]  C   Tipo do campo
				"",;                            // [07]  C   Picture
				nil,;                           // [08]  B   Bloco de PictTre Var
				nil,;                           // [09]  C   Consulta F3
				.F.,;                           // [10]  L   Indica se o campo é alteravel
				nil,;                           // [11]  C   Pasta do campo
				nil,;                           // [12]  C   Agrupamento do campo
				nil,;                           // [13]  A   Lista de valores permitido do campo (Combo)
				nil,;                           // [14]  N   Tamanho máximo da maior opção do combo
				nil,;                           // [15]  C   Inicializador de Browse
				nil,;                           // [16]  L   Indica se o campo é virtual
				nil,;                           // [17]  C   Picture Variável
				nil;                            // [18]  L   Indica pulo de linha após o campo
			)
		elseif SX3->(DbSeek(Padr(aCpoMdZ05G[nI], Len(SX3->X3_CAMPO))))
			oStruct:AddField(;
				AllTrim(aCpoMdZ05G[nI]),;        // [01]  C   Nome do Campo
				StrZero(nI,Len(SX3->X3_ORDEM)),; // [02]  C   Ordem
				AllTrim(X3Titulo()),;           // [03]  C   Titulo do campo
				X3Descric(),;                   // [04]  C   Descricao do campo
				{"Help"},;                      // [05]  A   Array com Help
				TamSX3(SX3->X3_CAMPO)[3],;      // [06]  C   Tipo do campo
				Iif(!Empty(SX3->X3_CAMPO), AllTrim(X3Picture(SX3->X3_CAMPO)), nil),;      // [07]  C   Picture
				nil,;                           // [08]  B   Bloco de PictTre Var
				SX3->X3_F3,;                    // [09]  C   Consulta F3
				!AllTrim(SX3->X3_CAMPO)$"Z06_KGMNTR",;//!AllTrim(SX3->X3_CAMPO)$"Z06_KGMNTR|Z06_TRATO",;  // [10]  L   Indica se o campo é alteravel
				nil,;                           // [11]  C   Pasta do campo
				nil,;                           // [12]  C   Agrupamento do campo
				nil,;                           // [13]  A   Lista de valores permitido do campo (Combo)
				nil,;                           // [14]  N   Tamanho máximo da maior opção do combo
				nil,;                           // [15]  C   Inicializador de Browse
				SX3->X3_CONTEXT == 'V',;		// [16]  L   Indica se o campo é virtual
				nil,;                           // [17]  C   Picture Variável
				nil;                            // [18]  L   Indica pulo de linha após o campo
			)
		endif
	next

	if !Empty(aArea)
		RestArea(aArea)
	endif
return oStruct

static function RotGrdMStr(nOpc) as Object
    local aArea   := GetArea() as Array
    local oStruct := FWFormModelStruct():New() as Object
    local nI as Numeric
	local aCampos := {} as Array
	
	IF nOpc == 1
		aCampos := aClone(aCpoMdRot)
	else
		aCampos := {"Z0S_EQUIP","ZV0_DESC","Z0T_ROTA"}
	endif

    SX3->(DbSetOrder(2))
    For nI := 1 To Len(aCampos)
        if SX3->(DbSeek(aCampos[nI]))
			if Alltrim(SX3->X3_CAMPO) == "ZV0_DESC"
				nTamanho := 10
			else
				nTamanho := TamSX3(SX3->X3_CAMPO)[1]
			endif
            oStruct:AddField(;
                     X3Titulo(),;               // [01]  C   Titulo do campo
                     X3Descric(),;              // [02]  C   ToolTip do campo
                     AllTrim(aCampos[nI]),;     // [03]  C   Id do Field
                     TamSX3(SX3->X3_CAMPO)[3],; // [04]  C   Tipo do campo
                     nTamanho,; 				// [05]  N   Tamanho do campo
                     TamSX3(SX3->X3_CAMPO)[2],; // [06]  N   Decimal do campo
                     nil,;                      // [07]  B   Code-block de validação do campo
                     nil,;                      // [08]  B   Code-block de validação When do campo
                     {},;                       // [09]  A   Lista de valores permitido do campo
                     .F.,;                      // [10]  L   Indica se o campo tem preenchimento obrigatório
                     nil,;                      // [11]  B   Code-block de inicializacao do campo
                     .F.,;                      // [12]  L   Indica se trata-se de um campo chave
                     .T.,;                      // [13]  L   Indica se o campo pode receber valor em uma operação de update.
                     .F.)                       // [14]  L   Indica se o campo é virtual
        endif
    Next nI
    
    RestArea(aArea)

Return oStruct

static function ROTGrdVStr(nOpc ) as Object
	local aArea   := GetArea() as Array
	local oStruct := FWFormViewStruct():New() as Object
	local nI, nLen as Numeric

	IF nOpc == 1
		aCampos := {"Z06_TRATO","Z06_KGMNT"}
	else
		aCampos := {"ZV0_DESC","Z0T_ROTA"}
	endif

	DbSelectArea("SX3")
	DbSetOrder(2)  // X3_CAMPO

	nLen := Len(aCampos)
	for nI := 1 to nLen
		SX3->(DbSetOrder(2))
		IF SX3->(DbSeek(Padr(aCampos[nI], Len(SX3->X3_CAMPO))))
			oStruct:AddField(;
				AllTrim(aCampos[nI]),;        // [01]  C   Nome do Campo
				StrZero(nI,Len(SX3->X3_ORDEM)),; // [02]  C   Ordem
				AllTrim(X3Titulo()),;           // [03]  C   Titulo do campo
				X3Descric(),;                   // [04]  C   Descricao do campo
				{"Help"},;                      // [05]  A   Array com Help
				TamSX3(SX3->X3_CAMPO)[3],;      // [06]  C   Tipo do campo
				Iif(!Empty(SX3->X3_CAMPO), AllTrim(X3Picture(SX3->X3_CAMPO)), nil),;      // [07]  C   Picture
				nil,;                           // [08]  B   Bloco de PictTre Var
				,;                              // [09]  C   Consulta F3
				.F.,;							// [10]  L   Indica se o campo é alteravel
				nil,;                           // [11]  C   Pasta do campo
				nil,;                           // [12]  C   Agrupamento do campo
				nil,;                           // [13]  A   Lista de valores permitido do campo (Combo)
				nil,;                           // [14]  N   Tamanho máximo da maior opção do combo
				nil,;                           // [15]  C   Inicializador de Browse
				.t.,;                           // [16]  L   Indica se o campo é virtual
				nil,;                           // [17]  C   Picture Variável
				nil;                            // [18]  L   Indica pulo de linha após o campo
			)
		endif
	next

	if !Empty(aArea)
		RestArea(aArea)
	endif
return oStruct

static function Z06GrdMStr(nOpc as Numeric) as Object
	local aArea   := GetArea() as Array
	local oStruct := FWFormModelStruct():New() as Object
	local nI, nLen as Numeric
	Local aCampos := { } as array
	local nTamanho as Numeric
	if nOpc == 1
		aCampos := aClone(aCpoMdZ06G)
	else
		aCampos := aClone(aCpoMdZ06D)
	endif

    nLen := Len(aCampos)
    for nI := 1 to nLen
        // AddField(<cTitulo >, <cTooltip >, <cIdField >, <cTipo >, <nTamanho >, [ nDecimal ], [ bValid ], [ bWhen ], [ aValues ], [ lObrigat ], [ bInit ], <lKey >, [ lNoUpd ], [ lVirtual ], [ cValid ])-> NIL
        if aCampos[nI]$"Z06_RECNO" .or. aCampos[nI]$"Z05_RECNO"
            oStruct:AddField(;
                 "Registro    ",;               // [01]  C   Titulo do campo
                 "Número do registro no ban",;  // [02]  C   ToolTip do campo
                 aCampos[nI],;                  // [03]  C   Id do Field
                 "N",;                          // [04]  C   Tipo do campo
                  14,;                          // [05]  N   Tamanho do campo
                  0,;                           // [06]  N   Decimal do campo
                 nil,;                          // [07]  B   Code-block de validação do campo
                 nil,;                          // [08]  B   Code-block de validação When do campo
                 nil,;                          // [09]  A   Lista de valores permitido do campo
                 .F.,;                          // [10]  L   Indica se o campo tem preenchimento obrigatório
                 nil,;                          // [11]  B   Code-block de inicializacao do campo
                 .F.,;                          // [12]  L   Indica se trata-se de um campo chave
                 .F.,;                          // [13]  L   Indica se o campo pode receber valor em uma operação de update.
                 .T.)                           // [14]  L   Indica se o campo é virtual
        else
            SX3->(DbSetOrder(2))
            if SX3->(DbSeek(Padr(aCampos[nI], Len(SX3->X3_CAMPO))))
				cValid := ""
                if nOpc == 2 .and. "Z06_" $ SX3->X3_CAMPO
					cValid := Iif(!Empty(SX3->X3_VLDUSER), ;
									"(" + AllTrim(SX3->X3_VLDUSER) + ")",;
									"");
							+ Iif(!Empty(SX3->X3_VLDUSER).and.!Empty(SX3->X3_VALID),; 
									".and.",;
									"");
							+ Iif(!Empty(SX3->X3_VALID),;
									"(" + AllTrim(SX3->X3_VALID) + ")",;
									"")
                endif

				if Alltrim(SX3->X3_CAMPO) == "Z06_DIETA"
					nTamanho := 12
				elseif Alltrim(SX3->X3_CAMPO) == "Z05_CURRAL"
					nTamanho := 4
				else
					nTamanho := TamSX3(SX3->X3_CAMPO)[1]
				endif

                oStruct:AddField(X3Titulo(),;                   // [01]  C   Titulo do campo
                                 X3Descric(),;                  // [02]  C   ToolTip do campo
                                 AllTrim(SX3->X3_CAMPO),;       // [03]  C   Id do Field
                                 TamSX3(SX3->X3_CAMPO)[3],;     // [04]  C   Tipo do campo
                                 nTamanho				 ,;     // [05]  N   Tamanho do campo
                                 TamSX3(SX3->X3_CAMPO)[2],;     // [06]  N   Decimal do campo
                                 Iif(!Empty(cValid), FWBuildFeature(STRUCT_FEATURE_VALID, cValid), nil),; // [07]  B   Code-block de validação do campo
                                 Iif(!Empty(SX3->X3_WHEN), FWBuildFeature(STRUCT_FEATURE_WHEN, SX3->X3_WHEN), nil),; // [08]  B   Code-block de validação When do campo
                                 Iif(!Empty(X3CBox()),StrToKArr(X3CBox(), ";"),nil),; // [09]  A   Lista de valores permitido do campo
                                 X3Obrigat(SX3->X3_CAMPO),;     // [10]  L   Indica se o campo tem preenchimento obrigatório
                                 FwBuildFeature( STRUCT_FEATURE_INIPAD, "Iif(!Inclui," + SX3->X3_ARQUIVO + "->" + AllTrim(SX3->X3_CAMPO) + ",CriaVar('" + AllTrim(SX3->X3_CAMPO) + "',.T.))" ),; // [11]  B   Code-block de inicializacao do campo
                                 .F.,;                          // [12]  L   Indica se trata-se de um campo chave
                                 ;//IIF(AllTrim(SX3->X3_CAMPO)$"Z06_MEGCAL|Z06_KGMSTR|Z06_KGMNTR|Z06_KGMNT",.F.,.T.),;//(SX3->X3_VISUAL == 'A'),;        // [13]  L   Indica se o campo pode receber valor em uma operação de update.
                                 iif(nOpc==1,.t.,.F.),;//(SX3->X3_VISUAL == 'A'),;        // [13]  L   Indica se o campo não pode receber valor em uma operação de update.
                                 SX3->X3_CONTEXT == 'V')	    // [14]  L   Indica se o campo é virtual
            else
                Help(/*Descontinuado*/,/*Descontinuado*/,"CAMPO NAO ENCONTRADO",/**/,"O campo " + aCampos[nI] + " não foi encontrado no banco de dados. ", 1, 1,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,.F.,{"Por favor, entre em contato com o TI." })
            endif
        endif
    next

	RestArea(aArea)
return oStruct

static function Z06GrdVStr(nOpc as Numeric) as Object
	local aArea   := GetArea() as Array
	local oStruct := FWFormViewStruct():New() as Object
	local nI, nLen as Numeric
	Local aCampos := {}	as Array

	if nOpc == 1
		aCampos := aClone(aCpoMdZ06G)
		aOrdem := {{"Z06_LOTE",1},{"Z05_CURRAL",2}, {"Z06_DIETA",3} , {"Z05_CABECA",4}, {"Z05_DIASDI",5}, {"Z05_PESOCO",6}, {"Z05_TOTMSC",7}, {"Z05_TOTMNC",8}}
	else
		aCampos := aClone(aCpoMdZ06D)
		aOrdem := {{"Z06_TRATO",1},{"Z06_LOTE",2}, {"Z06_DIETA",3} , {"Z06_KGMSTR",4}, {"Z06_KGMNTR",5}, {"Z06_MEGCAL",6}, {"Z06_KGMNT",7}}
	endif

	DbSelectArea("SX3")
	DbSetOrder(2)  // X3_CAMPO

	// aCpoMdZ06G := { "Z06_TRATO",  "Z06_DIETA",  "Z06_KGMSTR", "Z06_KGMNTR", "Z06_RECNO" }
	nLen := Len(aOrdem)
	for nI := 1 to nLen
		SX3->(DbSetOrder(2))
		if aCampos[nI]$"Z06_RECNO" .or. aCampos[nI]$"Z05_RECNO"
			oStruct:AddField(;
				aOrdem[nI,1],;                  // [01]  C   Nome do Campo
				cValToChar(aOrdem[nI,2]),; 		// [02]  C   Ordem
				"Reg no Banco",;                // [03]  C   Titulo do campo
				"Posic do Registro no Banco",;  // [04]  C   Descricao do campo
				{"Help"},;                      // [05]  A   Array com Help
				"N",;                           // [06]  C   Tipo do campo
				"",;                            // [07]  C   Picture
				nil,;                           // [08]  B   Bloco de PictTre Var
				nil,;                           // [09]  C   Consulta F3
				.F.,;                           // [10]  L   Indica se o campo é alteravel
				nil,;                           // [11]  C   Pasta do campo
				nil,;                           // [12]  C   Agrupamento do campo
				nil,;                           // [13]  A   Lista de valores permitido do campo (Combo)
				nil,;                           // [14]  N   Tamanho máximo da maior opção do combo
				nil,;                           // [15]  C   Inicializador de Browse
				nil,;                           // [16]  L   Indica se o campo é virtual
				nil,;                           // [17]  C   Picture Variável
				nil;                            // [18]  L   Indica pulo de linha após o campo
			)
		elseif SX3->(DbSeek(Padr(aCampos[nI], Len(SX3->X3_CAMPO))))
			oStruct:AddField(;
				AllTrim(aCampos[nI]),;        // [01]  C   Nome do Campo
				cValToChar(aOrdem[aScan(aOrdem,{|x| AllTrim(x[1]) == AllTrim(aCampos[nI])})][2]),; // [02]  C   Ordem
				AllTrim(X3Titulo()),;           // [03]  C   Titulo do campo2
				X3Descric(),;                   // [04]  C   Descricao do campo
				{"Help"},;                      // [05]  A   Array com Help
				TamSX3(SX3->X3_CAMPO)[3],;      // [06]  C   Tipo do campo
				Iif(!Empty(SX3->X3_CAMPO), AllTrim(X3Picture(SX3->X3_CAMPO)), nil),;      // [07]  C   Picture
				nil,;                           // [08]  B   Bloco de PictTre Var
				SX3->X3_F3,;                    // [09]  C   Consulta F3
				iif(nOpc==1,.F.,!AllTrim(SX3->X3_CAMPO)$"Z06_KGMNTR"),;// [10]  L   Indica se o campo é alteravel
				nil,;                           // [11]  C   Pasta do campo
				nil,;                           // [12]  C   Agrupamento do campo
				nil,;                           // [13]  A   Lista de valores permitido do campo (Combo)
				nil,;                           // [14]  N   Tamanho máximo da maior opção do combo
				nil,;                           // [15]  C   Inicializador de Browse
				SX3->X3_CONTEXT == 'V',;		// [16]  L   Indica se o campo é virtual
				nil,;                           // [17]  C   Picture Variável
				nil;                            // [18]  L   Indica pulo de linha após o campo
			)
		endif
	next

	if !Empty(aArea)
		RestArea(aArea)
	endif
return oStruct

static function LoadZ06D(oFormGrid, lCopia) as Array
	local aArea     := GetArea() 	AS Array
	local aTemplate := {0, {}} 		AS Array
	local aRet      := {} 			AS Array
	Local cLote  	:= oFormGrid:oFormModel:GetModel("MdGridZ06G"):GetValue("Z06_LOTE") AS Character
	Local cRota  	:= oFormGrid:oFormModel:GetModel("MdGridRotaG"):GetValue("Z0T_ROTA") AS Character
	Local nReg 		:= 0 as Numeric
	local cZ0TROTA  := IIF(Type("cFiltroRota")!="U" .and. !Empty(cFiltroRota),cFiltroRota,cRota)
	
	oExecZ06D:SetString(1,cZ0TROTA)
	oExecZ06D:SetString(2,cLote)

	cAlias := oExecZ06D:OpenAlias()

	while !(cAlias)->(Eof())
		AAdd(aRet, aClone(aTemplate))
		aRet[Len(aRet)][1] := ++nReg
		aRet[Len(aRet)][2] := {(cAlias)->Z06_TRATO;   // Z06_TRATO
							, (cAlias)->Z06_LOTE;   // Z06_LOTE
							, AllTrim((cAlias)->Z06_DIETA);   // Z06_DIETA
							, (cAlias)->Z06_KGMSTR;  // Z06_KGMSTR
							, (cAlias)->Z06_KGMNTR;  // Z06_KGMNTR
							, (cAlias)->Z06_MEGCAL;  // Z06_MEGCAL
							, (cAlias)->Z06_KGMNT;
							, (cAlias)->Z06_RECNO}   // Z06_KGMNT
		(cAlias)->(DbSkip())
	end

	(cAlias)->(DbCloseArea())

	if !Empty(aArea)
		RestArea(aArea)
	endif
return aRet

static function LoadZ06G(oFormGrid, lCopia) as Array
	local aArea     := GetArea() 	AS Array
	local aTemplate := {0, {}} 		AS Array
	local aRet      := {} 			AS Array
	Local cRota  	:= oFormGrid:oFormModel:GetModel("MdGridRotaG"):GetValue("Z0T_ROTA") AS Character
	Local nReg 		:= 0 as Numeric
	
	oExecZ06G:SetString(1,cRota)

	cAlias := oExecZ06G:OpenAlias()

	while !(cAlias)->(Eof())
		AAdd(aRet, aClone(aTemplate))
		aRet[Len(aRet)][1] := ++nReg
		aRet[Len(aRet)][2] := { Alltrim((cAlias)->Z05_LOTE);   // Z06_LOTE
							, AllTrim((cAlias)->Z05_CURRAL);   // Z05_CURRAL
							, AllTrim((cAlias)->Z05_DIETA);   // Z06_DIETA
							, (cAlias)->Z05_CABECA;  // Z06_KGMSTR
							, (cAlias)->Z05_DIASDI;  // Z06_KGMNTR
							, (cAlias)->Z05_PESOCO;  // Z06_MEGCAL
							, (cAlias)->Z05_TOTMSC;   // Z06_KGMNT
							, (cAlias)->Z05_TOTMNC;   // Z06_KGMNT
							, (cAlias)->Z05_RECNO;   // Z05_RECNO
							, Alltrim((cAlias)->Z0T_ROTA)}
		(cAlias)->(DbSkip())
	end

	(cAlias)->(DbCloseArea())

	if !Empty(aArea)
		RestArea(aArea)
	endif
return aRet

static function LoadRotG(oModel, lCopia) as Array
    local aArea     	:= GetArea() as Array
    local aRet      	:= {} as Array
    Local cALias    	:= "" as Character
    Local nSeq      	:= 0  as Numeric

	cAlias := oExecRotaG:OpenAlias()

	While !(cAlias)->(Eof())
	    aAdd(aRet, {++nSeq,{(cALias)->Z0S_EQUIP,Alltrim((cALias)->ZV0_DESC),(cALias)->Z0T_ROTA}})
	    (cAlias)->(DbSkip())
	EndDo
	(cAlias)->(DBCLOSEAREA())
    
    if Len(aRet) == 0
        aAdd(aRet, {1,{"","",""}})
    endif
    
    RestArea(aArea)
Return aRet

static function LoadRotD(oModel, lCopia) as Array
    local aArea     := GetArea() as Array
    local aRet      := {} as Array
    Local cALias    := "" as Character
    Local nSeq      := 0  as Numeric
	local cZ0TROTA  := oModel:oFormModel:GetModel("MdGridRotaG"):GetValue("Z0T_ROTA") as Character

	oExecRotaD:SetString(1,cZ0TROTA)

	cAlias := oExecRotaD:OpenAlias()

	While !(cAlias)->(Eof())
	    aAdd(aRet, {++nSeq,{(cALias)->Z0T_ROTA,(cALias)->Z06_TRATO,(cALias)->Z06_KGMNT}})
	    (cAlias)->(DbSkip())
	EndDo
	(cAlias)->(DBCLOSEAREA())
    
    if Len(aRet) == 0
        aAdd(aRet, {1,{"","",0}})
    endif
    
    RestArea(aArea)
Return aRet

static function LoadRt1(oModel, lCopia) as Array
    Local aRet   := {} as Array
	Local cEquip := oModel:oFormModel:GetModel("MdGridRotaG"):GetValue("Z0S_EQUIP")
	Local cRota  := oModel:oFormModel:GetModel("MdGridRotaG"):GetValue("Z0T_ROTA")
	Local cDesc  := oModel:oFormModel:GetModel("MdGridRotaG"):GetValue("ZV0_DESC")
	Local cLote  := oModel:oFormModel:GetModel("MdGridZ06G"):GetValue("Z06_LOTE")
	Local cCur  := oModel:oFormModel:GetModel("MdGridZ06G"):GetValue("Z05_CURRAL")
	
	aAdd(aRet, {1 ,{cEquip,cDesc,cRota,cLote,cCur}})

Return aRet

static function LoadHide(oModel, lCopia) as Array
    Local aRet  	:= {} as Array

	aAdd(aRet, {""})
	aAdd(aRet, {1})

Return aRet
//Programaçao anterior 
static function LoadZ05G(oModel, lCopia) as Array
	local aArea    	:= GetArea() as Array
	local aRet     	:= {} as Array
	local cLoteZ06 	:= oModel:oFormModel:GetModel("MdGridZ06G"):GetValue("Z06_LOTE") as Character
	local cAlias	:= "" as Character
	local nI, nLen as numeric
	local nReg		:= 0 as Numeric
	nLen := GetMV("VA_REGHIST",,5) // Identifica a quantidade de registros históricos que devem ser mostradas na rotina VAPCPA05  
	
	for nI := 1 to nLen
		oExecZ05G:SetDate(nI, dDataBase-nI)
	next

	oExecZ05G:SetString(nI, cLoteZ06)

	cAlias := oExecZ05G:OpenAlias()
	
	While !(cALias)->(EOF())
		aAdd(aRet ,{++nReg,{sToD((cAlias)->Z05_DATA),;		
						AllTrim((cAlias)->Z05_DIETA),;		
						(cAlias)->Z05_KGMSDI,;		
						(cAlias)->Z0I_NOTMAN,;		
						(cAlias)->Z0I_NOTTAR,;		
						(cAlias)->Z05_CABECA,;		
						(cAlias)->Z05_MEGCAL,;		
						(cAlias)->Z05_KGMNDI,;		
						(cAlias)->Z0W_QTDPRE,;		
						(cAlias)->Z0W_QTDREA,;		
						(cAlias)->DIF } }) 	
		(cALias)->(DbSkip())
	enddo

	(cALias)->(DbCloseArea())

	if !Empty(aArea)
		RestArea(aArea)
	endif
return aRet

static function LoadZ05C(oModel, lCopia) as Array
	local aArea    	:= GetArea() as Array
	local aRet     	:= {} as Array
	local nRecnoZ05 := oModel:oFormModel:GetModel("MdGridZ06G"):GetValue("Z05_RECNO") as Numeric
	local cAlias	:= "" as Character

	oExecZ05C:SetNumeric(1, nRecnoZ05)

	cAlias := oExecZ05C:OpenAlias()
	
	if !(cALias)->(EOF())
		aAdd(aRet ,{ALLTRIM((cAlias)->Z05_CURRAL),;		// Z05_LOTE		// C
					ALLTRIM((cAlias)->Z05_LOTE  ),;		// Z05_VERSAO	// C
					(cAlias)->Z05_CABECA,;		// Z05_DATA		// N 
					(cAlias)->Z05_DIASDI,;		// Z05_TRATO	// N
					(cAlias)->Z05_PESOCO,;		// Z05_KGMSTR	// N 
					(cAlias)->Z05_CMSPN,;		// Z05_DIETA	// N
					(cAlias)->Z05_TOTMSC,;		// Z05_KGMNTR	// N 
					(cAlias)->Z05_TOTMNC } ) 	// Z05_MEGCAL	// N 
	endif

	aAdd(aRet , {1})

	(cALias)->(DbCloseArea())

	if !Empty(aArea)
		RestArea(aArea)
	endif
return aRet

/* Gatilho para desativar e ativar a tela a partir do campo XX1_ROTAS */
User Function RefreshRotaVAPCPA17() as character
	Local aArea 	  	:= GetArea() 		as Array
	Local oModel	  	:= FWModelActive() 	as Object
	Local oCabRotas   	:= oModel:GetModel("MdFieldRota")  as Object
	
	IF Type("cFiltroRota") == "U"
		Private cFiltroRota	as Character
	endif
	IF Type("cFiltroEquip") == "U"
		Private cFiltroEquip	as Character
	endif
	
	//cFiltroRota := Alltrim(oCabRotas:GetValue("XX1_ROTAS"))
	cFiltroEquip := Alltrim(oCabRotas:GetValue("XX1_EQUIP"))

	if !Empty(cFiltroEquip)
		AtualizaTela()
	endif

	RestArea(aArea)
Return cFiltroEquip

Static Function Z06PreD(oModel, nLin, cAction) as Logical
	local aArea     := GetArea() as Array
	//Local oGrid 	:= oModel:GetModel("MdGridZ06D") as Object
	
	//default nLin := oGrid:GetLine()

	IF Type("oCurral") == "O"
        oCurral:SetText("TESTE")
	ENDIF 

	RestArea(aArea)
Return .T.

User Function PreparaQuerys()
	local aArea := GetArea() as Array
	local cQry  := "" as Character
	local nI, nLen as numeric
	local cValues 	:= "" as Character
	
	nLen := GetMV("VA_REGHIST",,5) // Identifica a quantidade de registros históricos que devem ser mostradas na rotina VAPCPA05  
	for nI := 1 to nLen
		cValues += Iif(Empty(cValues),"", ", ") + "(?)"
	next

	cQry := "select Z0T_ROTA " + CRLF
	cQry += "	, Z0S_EQUIP " + CRLF
	cQry += "	, ISNULL(ZV0_DESC,'') AS ZV0_DESC " + CRLF
	cQry += "   FROM "+RetSqlName("Z0T")+" Z0T   " + CRLF
	cQry += "   JOIN "+RetSqlName("Z0S")+" Z0S ON Z0S_ROTA = Z0T_ROTA  " + CRLF
	cQry += "   AND Z0S_FILIAL = Z0T_FILIAL  " + CRLF
	cQry += "   AND Z0S_DATA = Z0T_DATA  " + CRLF
	cQry += "   AND Z0S.D_E_L_E_T_ = ''  " + CRLF
	cQry += "    LEFT JOIN "+RetSqlName("ZV0")+" ZV0 ON  " + CRLF
	cQry += "	Z0S_EQUIP = ZV0_CODIGO " + CRLF
	cQry += "	AND ZV0.D_E_L_E_T_ ='' " + CRLF
	cQry += "  WHERE Z0T_FILIAL = '"+FwXFilial("Z0T")+"'    " + CRLF
	cQry += "    AND Z0T_DATA = '"+DToS(dDataBase)+"'    " + CRLF
	cQry += "    AND Z0T.D_E_L_E_T_ = '' " + CRLF
	cQry += "    GROUP BY Z0T_ROTA,Z0S_EQUIP,ZV0_DESC " + CRLF

	oExecRotaG := FwExecStatement():New(cQry)

	cQry := " select Z0T_ROTA  " + CRLF
	cQry += "	, Z06_TRATO " + CRLF
	cQry += "	, SUM(Z06_KGMNT) AS Z06_KGMNT " + CRLF
	cQry += "   from "+RetSqlName("Z06")+" Z06  " + CRLF
	cQry += "   JOIN "+RetSqlName("Z0T")+" Z0T ON   " + CRLF
	cQry += "        Z0T_FILIAL = Z06_FILIAL  " + CRLF
	cQry += "    AND Z0T_LOTE = Z06_LOTE  " + CRLF
	cQry += "    AND Z0T_DATA = Z06_DATA  " + CRLF
	cQry += "    AND Z0T_CURRAL = Z06_CURRAL  " + CRLF
	cQry += "    AND Z0T.D_E_L_E_T_ = ' '   " + CRLF
	cQry += "  WHERE Z06_FILIAL = '"+FwXFilial("Z06")+"'  " + CRLF
	cQry += "    AND Z06_DATA = '"+DToS(dDataBase)+"'  " + CRLF
	cQry += "    AND Z06.D_E_L_E_T_ = ''  " + CRLF
	cQry += "    AND Z0T.Z0T_ROTA = ?  " + CRLF
	cQry += "    GROUP BY Z0T_ROTA, Z06_TRATO " + CRLF

	oExecRotaD := FwExecStatement():New(cQry)

	cQry := " SELECT * " + CRLF
	cQry += " FROM "+RetSqlName("Z05")+" Z05" + CRLF
	cQry += " WHERE Z05.D_E_L_E_T_ = ''" + CRLF
	cQry += " AND Z05.R_E_C_N_O_ = ? " + CRLF

	oExecZ05C := FwExecStatement():New(cQry)
		
	cQry := " select --PERIODO.DIA " + CRLF
	cQry += " Z05.Z05_DIETA " + CRLF
	cQry += " , Z05.Z05_DATA " + CRLF
	cQry += " , Z05.Z05_CABECA " + CRLF
	cQry += " , Z0I_NOTMAN " + CRLF
	cQry += " , Z0I_NOTTAR " + CRLF
	cQry += " , Z05.Z05_KGMSDI " + CRLF
	cQry += " , Z05.Z05_MEGCAL " + CRLF
	cQry += " , Z05.Z05_KGMNDI " + CRLF 
	cQry += " , ISNULL(SUM(Z0W_QTDPRE),0) Z0W_QTDPRE " + CRLF
	cQry += " , ISNULL(SUM(CASE WHEN Z0W_PESDIG > 0 THEN Z0W_PESDIG ELSE Z0W_QTDREA END  ),0) Z0W_QTDREA " + CRLF
	cQry += " , ISNULL(SUM(CASE WHEN Z0W_PESDIG > 0 THEN Z0W_PESDIG ELSE Z0W_QTDREA END  ) - SUM(Z0W_QTDPRE),0) [DIF] " + CRLF
	cQry += " from (values "+cValues+" ) PERIODO (DIA) " + CRLF
	cQry += " left join "+RetSqlName("Z0R")+" Z0R " + CRLF
	cQry += " on Z0R.Z0R_FILIAL = '"+FWXFilial("Z0R")+"' " + CRLF
	cQry += " and Z0R.Z0R_DATA   = PERIODO.DIA " + CRLF
	cQry += " and Z0R.D_E_L_E_T_ = ' ' " + CRLF
	cQry += " join "+RetSqlName("Z05")+" Z05 ON  " + CRLF
	cQry += "    Z05_FILIAL = '"+FWXFilial("Z05")+"' " + CRLF
	cQry += " AND Z05_DATA = PERIODO.DIA " + CRLF
	cQry += " AND Z05.D_E_L_E_T_ = ' ' " + CRLF
	cQry += " LEFT JOIN  "+RetSqlName("Z0I")+" Z0I ON  " + CRLF
	cQry += " Z0I_FILIAL = '"+FWXFilial("Z0I")+"' " + CRLF
	cQry += " AND Z0I_DATA = PERIODO.DIA " + CRLF
	cQry += " AND Z0I.Z0I_LOTE = Z05_LOTE " + CRLF
	cQry += " AND Z0I.D_E_L_E_T_ =' '  " + CRLF
	cQry += " LEFT JOIN "+RetSqlName("Z0W")+" Z0W ON  " + CRLF
	cQry += " Z0W_FILIAL = '"+FWXFilial("Z0W")+"' " + CRLF
	cQry += " AND Z0W_LOTE = Z05_LOTE " + CRLF
	cQry += " AND Z0W_DATA = PERIODO.DIA " + CRLF
	cQry += " AND Z0W.D_E_L_E_T_ = ' '  " + CRLF
	cQry += " WHERE Z05_LOTE = ? " + CRLF
	cQry += " GROUP BY  " + CRLF
	cQry += " Z05.Z05_DIETA " + CRLF
	cQry += " , Z05.Z05_DATA " + CRLF
	cQry += " , Z05.Z05_CABECA " + CRLF
	cQry += " , Z05.Z05_KGMSDI " + CRLF
	cQry += " , Z05.Z05_MEGCAL " + CRLF
	cQry += " , Z05.Z05_KGMNDI " + CRLF
	cQry += " , PERIODO.DIA " + CRLF
	cQry += " , Z0I_NOTMAN " + CRLF
	cQry += " , Z0I_NOTTAR " + CRLF
	
	oExecZ05G := FwExecStatement():New(cQry)

	cQry := "select Z05.Z05_LOTE" + CRLF	
	cQry += " , Z05.Z05_DIETA	" + CRLF
	cQry += " , Z05.Z05_CURRAL	" + CRLF
	cQry += " , Z05.Z05_CABECA	" + CRLF
	cQry += " , Z05.Z05_DIASDI	" + CRLF
	cQry += " , Z05.Z05_PESOCO	" + CRLF
	cQry += " , Z05.Z05_TOTMSC	" + CRLF
	cQry += " , Z05.Z05_TOTMNC	" + CRLF
	cQry += " , Z0T.Z0T_ROTA	" + CRLF
	cQry += " , Z05.R_E_C_N_O_ Z05_RECNO" + CRLF
	cQry += "  from "+RetSqlName("Z05")+" Z05" + CRLF
	cQry += "    JOIN "+RetSqlName("Z0T")+" Z0T ON " + CRLF
	cQry += "         Z0T_FILIAL = Z05_FILIAL  " + CRLF
	cQry += "     AND Z0T_LOTE = Z05_LOTE  " + CRLF
	cQry += "     AND Z0T_DATA = Z05_DATA  " + CRLF
	cQry += "     AND Z0T_CURRAL = Z05_CURRAL  " + CRLF
	cQry += "     AND Z0T_ROTA = ?" + CRLF
	cQry += "     AND Z0T.D_E_L_E_T_ = ' '   " + CRLF
	cQry += "  where Z05.Z05_FILIAL = '" + FWxFilial("Z06") + "'" + CRLF
	cQry += "  and Z05.Z05_DATA   = '" + DToS(dDataBase) + "'" + CRLF
	cQry += "  and Z05.D_E_L_E_T_ = ' '" + CRLF
	cQry += "  order by Z05_CURRAL" + CRLF

	oExecZ06G := FwExecStatement():New(cQry)

	cQry := " select Z06.Z06_LOTE		" 		+ CRLF
	cQry += 		", Z06.Z06_DIETA	" + CRLF
	cQry += 		", Z06.Z06_TRATO	" + CRLF
	cQry += 		", Z06.Z06_KGMSTR	" + CRLF
	cQry += 		", Z06.Z06_KGMNTR	" + CRLF
	cQry += 		", Z06.Z06_MEGCAL	" + CRLF
	cQry += 		", Z06.Z06_KGMNT	" + CRLF
	cQry += 		", Z06.R_E_C_N_O_ Z06_RECNO" + CRLF
	cQry += 	" from " + RetSqlName("Z06") + " Z06" + CRLF
	cQry += 	"   JOIN "+RetSqlName("Z0T")+" Z0T ON " + CRLF
	cQry += 	"        Z0T_FILIAL = Z06_FILIAL  " + CRLF
	cQry += 	"    AND Z0T_LOTE = Z06_LOTE  " + CRLF
	cQry += 	"    AND Z0T_DATA = Z06_DATA  " + CRLF
	cQry += 	"    AND Z0T_CURRAL = Z06_CURRAL  " + CRLF
	cQry += 	"    AND Z0T_ROTA = ?  " + CRLF// PEGAR ROTA DO COMB CRLF
	cQry += 	"    AND Z0T.D_E_L_E_T_ = ' '   " + CRLF
	cQry += " where Z06.Z06_FILIAL = '" + FWxFilial("Z06") + "'" + CRLF
	cQry += 	" and Z06.Z06_DATA   = '" + DToS(dDataBase) + "'" + CRLF
	cQry += 	" and Z06.Z06_LOTE   = ?" + CRLF
	cQry += 	" and Z06.D_E_L_E_T_ = ' '" + CRLF
	cQry += " order by Z06.Z06_TRATO,Z06.Z06_LOTE" + CRLF

	oExecZ06D := FwExecStatement():New(cQry)

	RestArea(aArea)
Return nil

//Validação dos campos Z06_TRATO Z06_DIETA Z06_KGMSTR
User Function VAPCP05VALID()
	Local lRet 		:= .T. as Logical

	if FUNNAME() == "VAPCPA17"
		lRet := U_VAPCP17VALID()
	else
		lRet := U_vpcp05vl()
	endif

Return lRet

User Function VAPCP17VALID() as Logical
	Local aArea 			:= GetArea() 		as Array
	Local lRet 				:= .T. 				as Logical
	local oModel     		:= FWModelActive() 	as Object
	local oGridZ06D 		:= oModel:GetModel("MdGridZ06D") as Object
	local oGridZ06G 		:= oModel:GetModel("MdGridZ06G") as Object
	local nLin       		:= oGridZ06D:GetLine() as Numeric
	local cVar       		:= SubStr(ReadVar(),At(">",ReadVar())+1,Len(ReadVar())) as Character
	local cLog       		:= "" as Character
	local cSeq       		:= "" as Character
	local nMegaCal   		:= 0 as Numeric
	local nMCalTrat  		:= 0 as Numeric
	local nI   				:= 0 as Numeric
	local aSaveLines 		:= FWSaveRows()  as Array
	
	IF Type("cFiltroRota") == "U"
		Private cFiltroRota	as Character
	endif
	
	IF Type("cFiltroEquip") == "U"
		Private cFiltroEquip	as Character
	endif
	
	if !oGridZ06D:IsDeleted()
		Begin Transaction
			
			if "Z06_TRATO" $ cVar
				nLin := oGridZ06D:GetLine()
				nLen := oGridZ06D:Length()
				cTrato := oGridZ06D:GetValue("Z06_TRATO") 
				for nI := 1 to nLen
					if nI <> nLin .and. !oGridZ06D:IsDeleted(nI)
						if cTrato == oGridZ06D:GetValue("Z06_TRATO", nI)
							Help(,, "Trato inválido",, "O trato digitado já existe na linha " + AllTrim(Str(nI)) + ".", 1, 0,,,,,, {"Por favor, verifique."})
							lRet := .F.
							exit
						endif
					endif
				next

				if lRet
					cLog += "Alteração do conteúdo do campo Z06_TRATO. " + CRLF
					if oGridZ06D:GetValue("Z06_RECNO") == 0
						cLog += "Novo registro " + AllTrim(Str(Z06->(RecNo()))) + " Criado." + CRLF + "{" + DToS(Z05->Z05_DATA) + "|" + Z05->Z05_VERSAO + "|" + Z05->Z05_CURRAL + "|" + Z05->Z05_LOTE + "|" + Z05->Z05_DIAPRO + "|" + oGridZ06D:GetValue("Z06_TRATO") + "}" + CRLF
						RecLock("Z06", .T.)
						Z06->Z06_FILIAL := FWxFilial("Z06")
						Z06->Z06_DATA   := Z05->Z05_DATA
						Z06->Z06_VERSAO := Z05->Z05_VERSAO
						Z06->Z06_CURRAL := Z05->Z05_CURRAL
						Z06->Z06_LOTE   := Z05->Z05_LOTE
						Z06->Z06_DIAPRO := Z05->Z05_DIAPRO
						Z06->Z06_KGMNT  := nQuantMN * LOTES->B8_SALDO
						oGridZ06D:SetValue("Z06_RECNO", Z06->(RecNo()))
					else
						Z06->(DbGoTo(oGridZ06D:GetValue("Z06_RECNO")))
						cLog += "Registro " + AllTrim(Str(Z06->(RecNo()))) + " Alterado." + CRLF
						RecLock("Z06", .F.)
					endif
						cLog += "Valor anterior: " + Z06->Z06_TRATO + CRLF
						cLog += "Novo valor: " + oGridZ06D:GetValue("Z06_TRATO") + CRLF
						Z06->Z06_TRATO := oGridZ06D:GetValue("Z06_TRATO") 
					MsUnlock()
					u_Bouble("MdGridZ06D", "Z06_TRATO")
				endif

			elseif "Z06_DIETA" $ cVar
				cDieta := oGridZ06D:GetValue("Z06_DIETA")//+SPACE(TamSX3("Z06_DIETA")[1]-Len(oGridZ06D:GetValue("Z06_DIETA")))

				if Empty(cDieta)
					Help(,, "Dieta Inválida",, "O campo Dieta é obrigatório.", 1, 0,,,,,, {"Por favor digite uma dieta válida ou selecione." + CRlLF + "<F3 Disponível>."})
					lRet := .F.
				elseif !SB1->(DbSeek(FWxFilial("SB1")+cDieta)) .or. SB1->B1_X_TRATO!='1'
					Help(,, "Dieta Inválida",, "O código digitado não pertence a um produto válido ou esse produto não é uma dieta.", 1, 0,,,,,, {"Por favor digite uma dieta válida ou selecione." + CRLF + "<F3 Disponível>."})
					lRet := .F.
				endif
				
				if lRet
					if oGridZ06D:GetValue("Z06_KGMSTR") > 0
						oGridZ06D:SetValue("Z06_KGMNTR", u_CalcQtMN(cDieta, oGridZ06D:GetValue("Z06_KGMSTR")))
						oGridZ06D:SetValue("Z06_MEGCAL", (U_GetMegaCal(cDieta) * oGridZ06D:GetValue("Z06_KGMSTR")))
						oGridZ06D:SetValue("Z06_KGMNT" , u_CalcQtMN(cDieta, oGridZ06D:GetValue("Z06_KGMSTR"))*Z05->Z05_CABECA)
					endif
					
					cLog += "Alteração do conteúdo do campo Z06_DIETA. " + CRLF
					cSeq := U_GetSeq(cDieta)
					nMegaCal := U_GetMegaCal(cDieta)
					nMCalTrat := nMegaCal * oGridZ06D:GetValue("Z06_KGMSTR") //M->Z06_KGMSTR

					Z05->(DbSetOrder(2))	

					if Z05->(DbSeek(fWxFilial("Z05")+oGridZ06D:GetValue("Z06_LOTE")+dToS(dDataBase)))
						if oGridZ06D:GetValue("Z06_RECNO") == 0
							cLog += "Novo registro " + AllTrim(Str(Z06->(RecNo()))) + " Criado." + CRLF + "{" + DToS(Z05->Z05_DATA) + "|" + Z05->Z05_VERSAO + "|" + Z05->Z05_CURRAL + "|" + Z05->Z05_LOTE + "|" + Z05->Z05_DIAPRO + "|" + oGridZ06D:GetValue("Z06_TRATO") + "}" + CRLF
							RecLock("Z06", .T.)
							Z06->Z06_FILIAL := FWxFilial("Z06")
							Z06->Z06_DATA   := Z05->Z05_DATA
							Z06->Z06_VERSAO := Z05->Z05_VERSAO
							Z06->Z06_CURRAL := Z05->Z05_CURRAL
							Z06->Z06_LOTE   := Z05->Z05_LOTE
							Z06->Z06_DIAPRO := Z05->Z05_DIAPRO
							Z06->Z06_TRATO  := oGridZ06D:GetValue("Z06_TRATO")
							oGridZ06D:SetValue("Z06_RECNO", Z06->(RecNo()))
						else
							Z06->(DbGoTo(oGridZ06D:GetValue("Z06_RECNO")))
							cLog += "Registro " + AllTrim(Str(Z06->(RecNo()))) + " Alterado." + CRLF
							RecLock("Z06", .F.)
						endif
							cLog += "Valor anterior: " + Z06->Z06_DIETA + CRLF
							cLog += "Novo valor: " + oGridZ06D:GetValue("Z06_DIETA") + CRLF
							cLog += "Valor Matéria Natural anterior: " + AllTrim(Str(Z06->Z06_KGMNTR)) + CRLF
							cLog += "Novo valor de Matéria Natural: " + AllTrim(Str(oGridZ06D:GetValue("Z06_KGMNTR"))) + CRLF
							Z06->Z06_DIETA  := oGridZ06D:GetValue("Z06_DIETA") 
							Z06->Z06_KGMNTR := oGridZ06D:GetValue("Z06_KGMNTR")
							Z06->Z06_KGMNT  := oGridZ06D:GetValue("Z06_KGMNT") * Z05->Z05_CABECA
							Z06->Z06_SEQ := cSeq
						MsUnlock()

						AjuMateria(oModel)

						U_UpdTrbTmp()
					endif
				endif

			elseif "Z06_KGMSTR" $ cVar

				if oGridZ06D:GetValue("Z06_KGMSTR") < 0
					Help(,, "Valor inválido",, "O campo Dieta é obrigatório e deve ser igual ou superior a 0.", 1, 0,,,,,, {"Por favor digite um valor válido."})
					lRet := .F.
				//elseif oGridZ06D:GetValue("Z06_KGMSTR") == 0
				//	lRet := MsgYesNo("A quantidade de trato digitada é 0. Confirma a quantidade?", "Quantidade Zero")
				elseif oGridZ06D:GetValue("Z06_KGMSTR") > GetMV("VA_MXVALTR",,15.0) 
					Help(,, "Valor pode estar errado",, "O valor digitado é considerado muito grande para um trato mas será aceito pela rotina.", 1, 0,,,,,, {"Por favor, certifique-se que o valor digitado está correto."})
				endif

				if lRet
					cLog += "Alteração do conteúdo do campo Z06_KGMSTR. " + CRLF
				
					if !Empty(oGridZ06D:GetValue("Z06_DIETA"))
						cDieta := oGridZ06D:GetValue("Z06_DIETA")+SPACE(TamSX3("Z06_DIETA")[1]-Len(oGridZ06D:GetValue("Z06_DIETA")))
						oGridZ06D:SetValue("Z06_KGMNTR", U_CalcQtMN(cDieta, oGridZ06D:GetValue("Z06_KGMSTR")))
						oGridZ06D:SetValue("Z06_MEGCAL", U_GetMegaCal(cDieta) * oGridZ06D:GetValue("Z06_KGMSTR")/*  , oGridZ06D:GetValue("Z06_MEGCAL") */)
						oGridZ06D:SetValue("Z06_KGMNT" , u_CalcQtMN(cDieta, oGridZ06D:GetValue("Z06_KGMSTR")) * oGridZ06G:GetValue("Z05_CABECA"))
					endif

					Z05->(DbSetOrder(2))

					if Z05->(DbSeek(fWxFilial("Z05")+oGridZ06D:GetValue("Z06_LOTE")+dToS(dDataBase)))
						if oGridZ06D:GetValue("Z06_RECNO") == 0
							cLog += "Novo registro " + AllTrim(Str(Z06->(RecNo()))) + " Criado." + CRLF + "{" + DToS(Z05->Z05_DATA) + "|" + Z05->Z05_VERSAO + "|" + Z05->Z05_CURRAL + "|" + Z05->Z05_LOTE + "|" + Z05->Z05_DIAPRO + "|" + oGridZ06D:GetValue("Z06_TRATO") + "}" + CRLF
							RecLock("Z06", .T.)
							Z06->Z06_FILIAL := FWxFilial("Z06")
							Z06->Z06_DATA   := Z05->Z05_DATA
							Z06->Z06_VERSAO := Z05->Z05_VERSAO
							Z06->Z06_CURRAL := Z05->Z05_CURRAL
							Z06->Z06_LOTE   := Z05->Z05_LOTE
							Z06->Z06_DIAPRO := Z05->Z05_DIAPRO
							Z06->Z06_TRATO  := oGridZ06D:GetValue("Z06_TRATO")
							oGridZ06D:SetValue("Z06_RECNO", Z06->(RecNo()))
						else
							Z06->(DbGoTo(oGridZ06D:GetValue("Z06_RECNO")))
							RecLock("Z06", .F.)
						endif
							cLog += "Valor anterior: " + AllTrim(Str(Z06->Z06_KGMSTR)) + CRLF
							cLog += "Novo valor: " + AllTrim(Str(oGridZ06D:GetValue("Z06_KGMSTR") )) + CRLF
							cLog += "Valor Matéria Natural anterior: " + AllTrim(Str(Z06->Z06_KGMNTR)) + CRLF
							cLog += "Novo valor de Matéria Natural: " + AllTrim(Str(oGridZ06D:GetValue("Z06_KGMNTR"))) + CRLF
							Z06->Z06_KGMSTR := oGridZ06D:GetValue("Z06_KGMSTR") 
							Z06->Z06_KGMNTR := oGridZ06D:GetValue("Z06_KGMNTR")
							Z06->Z06_KGMNT  := oGridZ06D:GetValue("Z06_KGMNTR") * Z05->Z05_CABECA
							Z06->Z06_MEGCAL := oGridZ06D:GetValue("Z06_MEGCAL")

						Z06->(MsUnlock())

						AjuMateria(oModel)
						
						U_UpdTrbTmp()
					else
						Help(,, "Registro não encontrado",, "O registro não foi encontrado na tabela Z05.", 1, 0,,,,,, {"Por favor, verifique se o registro existe."})
						lRet := .F.
						DisarmTransaction()
					endif
				endif

				if !Empty(cLog)
					U_LogTrato("Alteração de campo.", cLog)
				endif
			endif 
		End Transaction
	endif

	RestArea(aArea)

	FWRestRows(aSaveLines)
Return lRet
/*/{Protheus.doc} AjuMateria
Atualiza as quantidade de materia seca e natural na tabela Z05
@author guima
@since 13/09/2019
@version 1.0
@return nil
@param oModel, object, Modelo da tela
@type function
/*/
static function AjuMateria(oModel)
	local aArea      := GetArea() AS Array
	//local oFormModel := oModel:GetModel("MdFieldZ05C") as Object
	Local oView 	 := FWViewActive()
	local oGridZ06D  := oModel:GetModel("MdGridZ06D") as Object 
	local oGridZ06G  := oModel:GetModel("MdGridZ06G") as Object 
	local oGridRota  := oModel:GetModel("MdGridRotaD") as Object 
	local cDieta     := "" as Character
	local nQtdeMs    := 0 as Numeric
	local nQtdeMn    := 0 as Numeric
	local nMegCal    := 0 as Numeric
	local nKgMnt     := 0 as Numeric
	local nCmsPn     := 0 as Numeric
	local nI, nLen 		  as Numeric
	local cQry := "" as Character

    nLen := oGridZ06D:Length()
    for nI := 1 to nLen
        if !oGridZ06D:IsDeleted(nI)
            if !Empty(oGridZ06D:GetValue("Z06_DIETA", nI)) .and. !AllTrim(oGridZ06D:GetValue("Z06_DIETA", nI))$cDieta
                cDieta += Iif(Empty(cDieta), "", ",") +  AllTrim(oGridZ06D:GetValue("Z06_DIETA", nI)) 
            endif
            nQtdeMs += oGridZ06D:GetValue("Z06_KGMSTR", nI)
            nQtdeMn += oGridZ06D:GetValue("Z06_KGMNTR", nI)
            nMegCal += oGridZ06D:GetValue("Z06_MEGCAL", nI)
        endif
    next
    
    nCmsPn := (nQtdeMs / Z05->Z05_PESMAT) * 100

	Z05->(DbGoTo(oGridZ06G:GetValue("Z05_RECNO")))
	
	RecLock("Z05", .F.)
		Z05->Z05_DIETA := cDieta
		Z05->Z05_KGMSDI := nQtdeMs
		Z05->Z05_KGMNDI := nQtdeMn
		Z05->Z05_TOTMSI := nQtdeMs
		Z05->Z05_TOTMNI := nQtdeMn
		Z05->Z05_MEGCAL := nMegcal
		Z05->Z05_CMSPN  := (nQtdeMs / Z05->Z05_PESMAT) *100
		Z05->Z05_MANUAL := "1"
	Z05->(MsUnlock())

	cQry := " select Z0T_ROTA " + CRLF
	cQry += "	, Z06_TRATO " + CRLF
	cQry += "	, SUM(Z06_KGMNT) AS Z06_KGMNT " + CRLF
	cQry += "   from "+RetSqlName("Z06")+" Z06  " + CRLF
	cQry += "   JOIN "+RetSqlName("Z0T")+" Z0T ON   " + CRLF
	cQry += "        Z0T_FILIAL = Z06_FILIAL  " + CRLF
	cQry += "    AND Z0T_LOTE = Z06_LOTE  " + CRLF
	cQry += "    AND Z0T_DATA = Z06_DATA  " + CRLF
	cQry += "    AND Z0T_CURRAL = Z06_CURRAL  " + CRLF
	cQry += "    AND Z0T.D_E_L_E_T_ = ' '   " + CRLF
	cQry += "  WHERE Z06_FILIAL = '"+FwXFilial("Z06")+"'  " + CRLF
	cQry += "    AND Z06_DATA = '"+DToS(dDataBase)+"'  " + CRLF
	cQry += "    AND Z06.D_E_L_E_T_ = ''  " + CRLF
	cQry += "    AND Z0T.Z0T_ROTA = '"+oGridRota:GetValue("Z0T_ROTA")+"'  " + CRLF
	cQry += "    AND Z06.Z06_TRATO = '"+oGridZ06D:GetValue("Z06_TRATO")+"'  " + CRLF
	cQry += "    GROUP BY Z0T_ROTA, Z06_TRATO " + CRLF
	
	nKgMnt := MPSysExecScalar(cQry,"Z06_KGMNT")

	For nI := 1 to oGridRota:Length()
		oGridRota:GoLine(nI)
		if oGridRota:GetValue("Z06_TRATO") == oGridZ06D:GetValue("Z06_TRATO")
			oGridRota:LoadValue("Z06_KGMNT", nKgMnt)
			exit
		EndIf
	Next nI
	
	oGridRota:GoLine(1)
	oView:Refresh()
	RestArea(aArea)
return nil

Static Function ValidZ06g(nOpc) as logical 
	Local aArea  := GetArea() as Array
	Local oModel := FWModelActive() as Object
	Local oGridZ06D  := oModel:GetModel("MdGridZ06D") as Object
	Local aErro  := {} as Array
	Local lRet   := .T. as Logical
	
	MsgAlert("nOpc: " + AllTrim(Str(nOpc)))

	if !(lRet := oGridZ06D:VldLineData(.F.))
		MsgAlert("VldLineData: " + iif(lRet, "True", "False"))
		if !(lRet := oGridZ06D:VldData(.F.))
			MsgAlert("VldData: " + iif(lRet, "True", "False"))
			aErro := oModel:GetErrorMessage()
		endif

		aErro := oModel:GetErrorMessage()
	
		if !Empty(aErro[1])
			AutoGrLog( "Id do formulário de origem: " + ' [' + AllToChar( aErro[1] ) + ']' )
		endif
		if !Empty(aErro[2])
			AutoGrLog( "Id do campo de origem: "	  + ' [' + AllToChar( aErro[2] ) + ']' )
		endif
		if !Empty(aErro[3])
			AutoGrLog( "Id do formulário de erro: "   + ' [' + AllToChar( aErro[3] ) + ']' )
		endif
		if !Empty(aErro[4])
			AutoGrLog( "Id do campo de erro: "	      + ' [' + AllToChar( aErro[4] ) + ']' )
		endif
		if !Empty(aErro[5])
				AutoGrLog( "Id do erro: "	     		  + ' [' + AllToChar( aErro[5] ) + ']' )
		endif
		if !Empty(aErro[6])
			AutoGrLog( "Mensagem do erro: "    		  + ' [' + AllToChar( aErro[6] ) + ']' )
		endif
		if !Empty(aErro[7])
			AutoGrLog( "Mensagem da solução: " 		  + ' [' + AllToChar( aErro[7] ) + ']' )
		endif
		if !Empty(aErro[8])
			AutoGrLog( "Valor atribuído: "     		  + ' [' + cValToChar( aErro[8] ) + ']' )
		endif
		if !Empty(aErro[9])
			//lRet := .F.
			AutoGrLog( "Valor anterior: "	   		  + ' [' + cValToChar( aErro[9] ) + ']' )
		endif
		MostraErro()
	endif

	RestArea(aArea)
Return lRet 

Static FUnction Reprograma(nOpc)
	local aArea  	 := GetArea()
	local aParam 	 := {mv_par01, mv_par02, mv_par03}
	local oModel 	 := FWModelActive() as Object
	local oView  	 := FWViewActive() as Object
	local oGridRota  := oModel:GetModel("MdGridRotaD") as Object
	local oGridZ06G  := oModel:GetModel("MdGridZ06G") as Object
	local cFillPerg  := "VAPCPA051" as Character
	local cCurral    := "" as Character
	local cLote      := oGridZ06G:GetValue("Z06_LOTE") as Character
	local aSaveLines := FWSaveRows() as Array
	local nI 		 := 0 as Numeric
	local lRet 		 := .T. as Logical
	local cZ0TROTA   := oGridRota:GetValue("Z0T_ROTA") as Character
	
	if nOpc == 1
		Z05->(DbGoTo(oGridZ06G:GetValue("Z05_RECNO")))
		
		cCurral := Z05->Z05_CURRAL

		if (lRet := Pergunte(cFillPerg))
			if FillTrato(cCurral, cLote)
				
				mv_par01 := aParam[1]
				mv_par02 := aParam[2]
				mv_par03 := aParam[3]
				
				if !Empty(cZ0TROTA)
					cFiltroRota := cZ0TROTA
				endif 

				AtualizaTela()
				
				FWRestRows(aSaveLines)
				oView:Refresh()

				oGridZ06G:SeekLine({{"Z06_LOTE", cLote}})

			endif 
		endif 
	else
		oGridZ06G:GoLine(1)
		
		if (lRet := Pergunte(cFillPerg))
			For nI := 1 to oGridZ06G:Length()
				oGridZ06G:GoLine(nI)
				if !oGridZ06G:IsDeleted()

					Z05->(DbGoTo(oGridZ06G:GetValue("Z05_RECNO")))
					cLote   := Z05->Z05_LOTE
					cCurral := Z05->Z05_CURRAL

					if !(lRet := FillTrato(cCurral, cLote))
						Help(,, "Trato não foi preenchido",, "O trato não foi preenchido corretamente.", 1, 0,,,,,, {"Por favor, verifique."})
						lRet := .F.
					endif
				endif
			next

			mv_par01 := aParam[1]
			mv_par02 := aParam[2]
			mv_par03 := aParam[3]
			
			if !Empty(cZ0TROTA)
				cFiltroRota := cZ0TROTA
			endif 

			AtualizaTela()
				
			FWRestRows(aSaveLines)
			oView:Refresh()
		endif 
	endif 

	RestArea(aArea)
Return 

static function FillTrato(cCurral, cLote)
	local lRet      := .T.
	local nMaxTrato := u_GetNroTrato()
	local cAlias := ""
	local i
	local cSeq      := ""
	local nMCalTrt  := 0
	local cAlias1	:= ""

	DbSelectArea("Z08")
	DbSetOrder(1) // Z08_FILIAL+Z08_CODIGO
	Z08->(DbSeek(FWxFilial("Z08")+cCurral))

	DbSelectArea("SB8")
	DbSetOrder(7) //B8_FILIAL+B8_LOTECTL+B8_X_CURRA
	SB8->(DbSeek(FWxFilial("SB8")+cLote)) 

	// Valida se os parâmetros estão OK.  
	DbSelectArea("SB1")
	DbSetOrder(1) // B1_FILIAL + B1_COD
	if !SB1->(DbSeek(FWxFilial("SB1")+mv_par01)) .or. SB1->B1_X_TRATO!='1'
		Help(,, "Dieta Inválida",, "O código digitado não pertence a um produto válido ou esse produto não é uma dieta.", 1, 0,,,,,, {"Por favor digite uma dieta válida ou selecione." + CRLF + "<F3 Disponível>."})
		lRet := .F.
	endif

	if lRet .and. mv_par02 <= 0
		Help(,, "Quantidade Inválida",, "A quantidade digitada deve ser superior a 0.", 1, 0,,,,,, {"Por favor, digite uma quantidade válida."})
		lRet := .F.
	endif

	if lRet .and. mv_par02 > GetMV("VA_MXVALTR",,15.0) 
		lRet := MsgYesNo("O valor digitado " + AllTrim(Str(mv_par02)) + " é considerado muito grande para um trato. Pode ser que esse valor esteja errado. Confirma esse valor para o trato?", "Valor pode estar errado.")
	endif
	
	if lRet .and. mv_par03 == 0
		Help(,, "Nro de Tratos Inválido",, "O número de tratos deve ser superior a 0.", 1, 0,,,,,, {"Por favor, digite uma um numero de tratos válido válida."})
		lRet := .F.
	endif

	if lRet .and. mv_par03 > nMaxTrato
		Help(,, "Nro de Tratos Inválido",, "O número de tratos deve ser menor que ou igual a " + AllTrim(Str(nMaxTrato)) + " de acordo com o parametrizado em VA_NTRATO.", 1, 0,,,,,, {"Por favor, digite uma um número de tratos válido."})
		lRet := .F.
	endif

	if lRet 

		begin transaction

		if !Z05->(DbSeek(FWxFilial("Z05")+DToS(dDataBase)+'1'+cCurral+cLote))
			_cSql := " select SB8.B8_LOTECTL" + _ENTER_ +;
						"       , Z0O.Z0O_GMD" + _ENTER_ +;
						"       , Z0O.Z0O_PESO" + _ENTER_ +;
						"       , Z0O.Z0O_CMSPRE" + _ENTER_ +;
						"       , sum(SB8.B8_SALDO) B8_SALDO" + _ENTER_ +;
						"       , sum(B8_XPESOCO*B8_SALDO)/sum(B8_SALDO) B8_XPESOCO" + _ENTER_ +;
						"       , min(SB8.B8_XDATACO) DT_INI_PROG" + _ENTER_ +;
						"       , cast(convert(datetime, '" + DToS(dDataBase) + "', 103) - convert(datetime, min(SB8.B8_XDATACO), 103) as numeric) DIAINI" + _ENTER_ +;
						" from " + RetSqlName("SB8") + " SB8" + _ENTER_ +;
						" left join " + RetSqlName("Z0O") + " Z0O on Z0O.Z0O_FILIAL = '" + FWxFilial("Z0O") + "'" + _ENTER_ +;
						"                               and Z0O.Z0O_LOTE   = SB8.B8_LOTECTL" + _ENTER_ +;
						"                               and (" + _ENTER_ +;
						"                                       '" + DToS(dDataBase) + "' between Z0O.Z0O_DATAIN and Z0O.Z0O_DATATR" + _ENTER_ +;
						"                                       or (Z0O.Z0O_DATAIN <= '" + DToS(dDataBase) + "' and Z0O.Z0O_DATATR = '        ')" + _ENTER_ +;
						"                               )" + _ENTER_ +;
						"                               and Z0O.D_E_L_E_T_ = ' '" + _ENTER_ +;
						" where SB8.B8_FILIAL  = '" + FWxFilial("SB8") + "'" + _ENTER_ +;
						"   and SB8.B8_SALDO    > 0" + _ENTER_ +;
						"   and SB8.D_E_L_E_T_ = ' '" + _ENTER_ +;
						"   and SB8.B8_X_CURRA = '" +cCurral+ "'" + _ENTER_ +;
						"   and SB8.B8_LOTECTL = '" +cLote+ "'" + _ENTER_ +;
						" group by SB8.B8_LOTECTL, Z0O.Z0O_GMD, Z0O_PESO, Z0O_CMSPRE"
			
			cAlias := MpSysOpenQuery(_cSql)
			nPesoCo := (cAlias)->B8_XPESOCO
			nGMD    := (cAlias)->Z0O_GMD
		
			_nMCALPR := 0
			If !Empty((cAlias)->Z0O_PESO) .AND. !Empty((cAlias)->Z0O_CMSPRE)
				_cSql := " SELECT distinct " + cValToChar( (cAlias)->Z0O_PESO ) +;
							" * G1_ENERG * (" + cValToChar( (cAlias)->Z0O_CMSPRE ) + "/100) AS MEGACAL"+_ENTER_+;
							" FROM "+RetSqlName("SG1")+" "+CRLF+;
							" WHERE G1_FILIAL = '" + xFilial('SG1') + "' "+CRLF+;
							"   AND G1_COD = '" + GetMV("VA_PCP07MC",,'FINAL') + "'"+CRLF+;
							"   AND D_E_L_E_T_ = ' '"

				cAlias1 := MpSysOpenQuery(_cSql)

				MEMOWRITE("C:\TOTVS_RELATORIOS\vaPCPa05_Z05_MCALPR.SQL", _cSql)
				
				if (!(cAlias1)->(Eof()))
					_nMCALPR := (cAlias1)->MEGACAL
				EndIf
				
				(cAlias1)->(DbCloseArea())    
			EndIf
			(cAlias)->(DbCloseArea())       

			RecLock("Z05", .T.)
				Z05->Z05_FILIAL := FWxFilial("Z05")
				Z05->Z05_DIETA  := MV_PAR01
				Z05->Z05_DATA   := dDataBase
				Z05->Z05_VERSAO := '1'
				Z05->Z05_CURRAL := cCurral
				Z05->Z05_LOTE   := cLote
				Z05->Z05_CABECA := QtdCabecas(cLote)
				Z05->Z05_DIASDI := DiasDieta(cLote, dDataBase)+1
				Z05->Z05_PESOCO := nPesoCo
				Z05->Z05_PESMAT := nPesoCo + Z05->Z05_DIASDI * nGMD
				Z05->Z05_CMSPN  := Iif(Z05->Z05_PESMAT == 0, 1, Z05->Z05_KGMSDI/Z05->Z05_PESMAT*100)
				Z05->Z05_MCALPR := _nMCALPR
		else
			TCSqlExec(;
				"update " + RetSqlName("Z06") +;
					" set D_E_L_E_T_ = '*'" +;
				" where Z06_FILIAL = '" + Z05->Z05_FILIAL + "'" +;
					" and Z06_DATA   = '" + DToS(Z05->Z05_DATA) + "'" +;
					" and Z06_VERSAO = '" + Z05->Z05_VERSAO + "'" +;
					" and Z06_CURRAL = '" + Z05->Z05_CURRAL + "'" +;
					" and Z06_LOTE   = '" + Z05->Z05_LOTE + "'" +;
					" and D_E_L_E_T_ = ' '" ;
			)
			RecLock("Z05", .F.)
		endif

			Z05->Z05_MANUAL := '1'
			Z05->Z05_KGMSDI := mv_par02
			Z05->Z05_KGMNDI := u_CalcQtMN(mv_par01, mv_par02)
			Z05->Z05_TOTMSI := Z05->Z05_KGMSDI
			Z05->Z05_CMSPN  := (mv_par02 / Z05->Z05_PESMAT)*100//(Z05->Z05_PESOCO + Z05->Z05_DIASDI * nGMD)
			Z05->Z05_TOTMNI := Z05->Z05_KGMNDI
			Z05->Z05_NROTRA := mv_par03
			Z05->Z05_MEGCAL := U_GetMegaCal(mv_par01) * mv_par02

			MsUnlock()

		U_CanUseZ05()

		aKgMS := U_DivTrato(mv_par02, mv_par03)
		cSeq := U_GetSeq(mv_par01)
		nMCalTrt := U_GetMegaCal(mv_par01)    

		// "Z06_TRATO",  "Z06_DIETA",  "Z06_KGMSTR", "Z06_KGMNTR", "Z06_RECNO"
		for i := 1 to mv_par03
			RecLock("Z06", .T.)
				Z06->Z06_FILIAL := FwxFilial("Z06")
				Z06->Z06_DATA   := dDataBase
				Z06->Z06_VERSAO := '1'
				Z06->Z06_CURRAL := Z05->Z05_CURRAL
				Z06->Z06_LOTE   := Z05->Z05_LOTE
				Z06->Z06_DIAPRO := Z05->Z05_DIAPRO
				Z06->Z06_TRATO  := AllTrim(Str(i))
				Z06->Z06_DIETA  := mv_par01
				Z06->Z06_KGMSTR := aKgMS[i]
				Z06->Z06_KGMNTR := u_CalcQtMN(mv_par01, aKgMS[i])
				Z06->Z06_SEQ    := cSeq
				Z06->Z06_MEGCAL := nMCalTrt * aKgMS[i]
				Z06->Z06_KGMNT  := u_CalcQtMN(mv_par01, aKgMS[i]) * Z05->Z05_CABECA
			MsUnlock()
		next

		end transaction
	endif

return lRet


/*/{Protheus.doc} AtuSX1
Cria dinamicamente as perguntas usadas pela rotina
@author jr.andre
@since 13/09/2019
@version 1.0
@return nil
@param cPerg, characters, Código da pergunta a ser criada
@type function
/*/
static function AtuSX1(cPerg)
	local aArea    := GetArea()
	local aAreaDic := SX1->( GetArea() )
	local aEstrut  := {}
	local aStruDic := SX1->( dbStruct() )
	local aDados   := {}
	local i        := 0
	local j        := 0
	local nTam1    := Len( SX1->X1_GRUPO )
	local nTam2    := Len( SX1->X1_ORDEM )

	cPerg          := PadR(cPerg, Len(SX1->X1_GRUPO))

	if !SX1->( DbSeek( cPerg ) )

		aEstrut := { "X1_GRUPO"  , "X1_ORDEM"  , "X1_PERGUNT", "X1_PERSPA" , "X1_PERENG" , "X1_VARIAVL", "X1_TIPO"   , ;
					"X1_TAMANHO", "X1_DECIMAL", "X1_PRESEL" , "X1_GSC"    , "X1_VALID"  , "X1_VAR01"  , "X1_DEF01"  , ;
					"X1_DEFSPA1", "X1_DEFENG1", "X1_CNT01"  , "X1_VAR02"  , "X1_DEF02"  , "X1_DEFSPA2", "X1_DEFENG2", ;
					"X1_CNT02"  , "X1_VAR03"  , "X1_DEF03"  , "X1_DEFSPA3", "X1_DEFENG3", "X1_CNT03"  , "X1_VAR04"  , ;
					"X1_DEF04"  , "X1_DEFSPA4", "X1_DEFENG4", "X1_CNT04"  , "X1_VAR05"  , "X1_DEF05"  , "X1_DEFSPA5", ;
					"X1_DEFENG5", "X1_CNT05"  , "X1_F3"     , "X1_PYME"   , "X1_GRPSXG" , "X1_HELP"   , "X1_PICTURE", ;
					"X1_IDFIL"  }
		
		if cPerg == "VAPCPA05  "
									//123456789012345678901234567890 
			AAdd( aDados, {cPerg,'01','Data do trato?                ','Data do trato?                ','Data do trato?                ','mv_ch1','D', 8,0,0,'G','','mv_par01','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','',            '', {"Informe a data do trato.", "Informe a data do trato.", "Informe a data do trato."}} )
			
		elseif cPerg == "VAPCPA051 "
		
			AAdd( aDados, {cPerg,'01','Dieta?                        ','Dieta?                        ','Dieta?                        ','mv_ch1','C',30,0,0,'G','','mv_par01','','','','','','','','','','','','','','','','','','','','','','','','','DIETA ','S','','','',            '', {"Informe ou selecione a dieta para o trato." + CRLF + "<F3 Disponível>", "Informe ou selecione a dieta para o trato." + CRLF + "<F3 Disponível>", "Informe ou selecione a dieta para o trato." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'02','Qtde Mat Seca em Kg?          ','Qtde Mat Seca em Kg?          ','Qtde Mat Seca em Kg?          ','mv_ch2','N', 8,2,0,'G','','mv_par02','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','@E 99,999.99','', {"Informe a quantidade total de ração que será servida no dia.", "Informe a quantidade total de ração que será servida no dia.", "Informe a quantidade total de ração que será servida no dia."}} )
			AAdd( aDados, {cPerg,'03','Número de tratos?             ','Número de tratos?             ','Número de tratos?             ','mv_ch3','N', 1,0,0,'G','','mv_par03','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','@E 9',        '', {"Informe em quantos tratos a ração que será servida durante o dia.", "Informe em quantos tratos a ração que será servida durante o dia.", "Informe em quantos tratos a ração que será servida durante o dia."}} )
		
		elseif cPerg == "VAPCPA052 "
		
			AAdd( aDados, {cPerg,'01','Qtde Mat Seca em Kg?          ','Qtde Mat Seca em Kg?          ','Qtde Mat Seca em Kg?          ','mv_ch1','N', 8,2,0,'G','','mv_par01','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','@E 99,999.99','', {"Informe a quantidade total de ração que será servida entre os tratos do dia.", "Informe a quantidade total de ração que será servida entre os tratos do dia.", "Informe a quantidade total de ração que será servida entre os tratos do dia."}} )
		
		elseif cPerg == "VAPCPA053 "
		
			AAdd( aDados, {cPerg,'01','Número de tratos?             ','Número de tratos?             ','Número de tratos?             ','mv_ch1','N', 1,0,0,'G','','mv_par01','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','@E 9',        '', {"Informe em quantos tratos a ração que será servida durante o dia.", "Informe em quantos tratos a ração que será servida durante o dia.", "Informe em quantos tratos a ração que será servida durante o dia."}} )
			AAdd( aDados, {cPerg,'02','Rota de?                      ','Rota de?                      ','Rota de?                      ','mv_ch2','C',TamSX3('ZRT_ROTA')[1],0,0,'G','','mv_par02','','','','','','','','','','','','','','','','','','','','','','','','','ZRT   ','S','','','',            '', {"Informe a rota inicial para o filtro. <F3 Disponível>", "Informe a rota inicial para o filtro. <F3 Disponível>", "Informe a rota inicial para o filtro. <F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'03','Rota até?                     ','Rota até?                     ','Rota até?                     ','mv_ch3','C',TamSX3('ZRT_ROTA')[1],0,0,'G','','mv_par03','','','','','','','','','','','','','','','','','','','','','','','','','ZRT   ','S','','','',            '', {"Informe a rota final para o filtro. <F3 Disponível>", "Informe a rota final para o filtro. <F3 Disponível>", "Informe a rota final para o filtro. <F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'04','Curral de?                    ','Curral de?                    ','Curral de?                    ','mv_ch4','C',20,0,0,'G','','mv_par02','','','','','','','','','','','','','','','','','','','','','','','','','Z08   ','S','','','',            '', {"Informe o curral inicial para o filtro. <F3 Disponível>", "Informe o curral inicial para o filtro. <F3 Disponível>", "Informe o curral inicial para o filtro. <F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'05','Curral até?                   ','Curral até?                   ','Curral até?                   ','mv_ch5','C',20,0,0,'G','','mv_par03','','','','','','','','','','','','','','','','','','','','','','','','','Z08   ','S','','','',            '', {"Informe o curral final para o filtro. <F3 Disponível>", "Informe o curral final para o filtro. <F3 Disponível>", "Informe o curral final para o filtro. <F3 Disponível>"}} )

		elseif cPerg == "VAPCPA054 "
		
			AAdd( aDados, {cPerg,'01','Curral?                       ','Curral?                       ','Curral?                       ','mv_ch1','C',20,0,0,'G','','mv_par01','','','','','','','','','','','','','','','','','','','','','','','','','Z08LIV','S','','','',            '', {"Informe ou selecione um curral vazio." + CRLF + "<F3 Disponível>", "Informe ou selecione um curral vazio." + CRLF + "<F3 Disponível>", "Informe ou selecione um curral vazio." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'02','Lote?                         ','Lote?                         ','Lote?                         ','mv_ch2','C',10,0,0,'G','','mv_par02','','','','','','','','','','','','','','','','','','','','','','','','','SB8P05','S','','','',            '', {"Informe ou selecione um lote que tenha pertencido a esse curral." + CRLF + "<F3 Disponível>", "Informe ou selecione um lote que tenha pertencido a esse curral." + CRLF + "<F3 Disponível>", "Informe ou selecione um lote que tenha pertencido a esse curral." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'03','Dieta?                        ','Dieta?                        ','Dieta?                        ','mv_ch3','C',30,0,0,'G','','mv_par03','','','','','','','','','','','','','','','','','','','','','','','','','DIETA ','S','','','',            '', {"Informe ou selecione a dieta para o trato." + CRLF + "<F3 Disponível>", "Informe ou selecione a dieta para o trato." + CRLF + "<F3 Disponível>", "Informe ou selecione a dieta para o trato." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'04','Qtde Mat Seca em Kg?          ','Qtde Mat Seca em Kg?          ','Qtde Mat Seca em Kg?          ','mv_ch4','N', 8,2,0,'G','','mv_par04','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','@E 99,999.99','', {"Informe a quantidade total de ração que será servida no dia.", "Informe a quantidade total de ração que será servida no dia.", "Informe a quantidade total de ração que será servida no dia."}} )
			AAdd( aDados, {cPerg,'05','Número de tratos?             ','Número de tratos?             ','Número de tratos?             ','mv_ch5','N', 1,0,0,'G','','mv_par05','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','@E 9',        '', {"Informe em quantos tratos a ração que será servida durante o dia.", "Informe em quantos tratos a ração que será servida durante o dia.", "Informe em quantos tratos a ração que será servida durante o dia."}} )
			AAdd( aDados, {cPerg,'06','Qtde de Cabeças?              ','Quantidade de Cabeças?        ','Quantidade de Cabeças?        ','mv_ch6','N', 3,0,0,'G','','mv_par06','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','@E 999',      '', {"Informe a quantidade de cabeças que estão no curral.", "Informe a quantidade de cabeças que estão no curral.", "Informe a quantidade de cabeças que estão no curral."}} )
		
		elseif cPerg == "VAPCPA055 "

			AAdd( aDados, {cPerg,'01','Rota de?                      ','Rota de?                      ','Rota de?                      ','mv_ch1','C',TamSX3("Z05_ROTEIR")[1],0,0,'G','','mv_par01','','','','','','','','','','','','','','','','','','','','','','','','','ZRT   ','S','','','','', {"Informe a rota inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe a rota inicial para o filtro.", "Informe a data do trato para o filtro."}} )
			AAdd( aDados, {cPerg,'02','Rota até?                     ','Rota até?                     ','Rota até?                     ','mv_ch2','C',TamSX3("Z05_ROTEIR")[1],0,0,'G','','mv_par02','','','','','','','','','','','','','','','','','','','','','','','','','ZRT   ','S','','','','', {"Informe a rota final para o filtro." + CRLF + "<F3 Disponível>", "Informe a rota final para o filtro." + CRLF + "<F3 Disponível>", "Informe a data do trato para o filtro." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'03','Curral de?                    ','Curral de?                    ','Curral de?                    ','mv_ch3','C',20,0,0,'G','','mv_par03','','','','','','','','','','','','','','','','','','','','','','','','','Z08   ','S','','','','', {"Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'04','Curral até?                   ','Curral até?                   ','Curral até?                   ','mv_ch4','C',20,0,0,'G','','mv_par04','','','','','','','','','','','','','','','','','','','','','','','','','Z08   ','S','','','','', {"Informe o curral final para o filtro." + CRLF + "<F3 Disponível>", "Informe o curral final para o filtro." + CRLF + "<F3 Disponível>", "Informe o curral final para o filtro." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'05','Lote de?                      ','Lote de?                      ','Lote de?                      ','mv_ch5','C',10,0,0,'G','','mv_par05','','','','','','','','','','','','','','','','','','','','','','','','','LOTES ','S','','','','', {"Informe o lote inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o lote inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o lote inicial para o filtro." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'06','Lote até?                     ','Lote até?                     ','Lote até?                     ','mv_ch6','C',10,0,0,'G','','mv_par06','','','','','','','','','','','','','','','','','','','','','','','','','LOTES ','S','','','','', {"Informe o lote final para o filtro." + CRLF + "<F3 Disponível>", "Informe o lote final para o filtro." + CRLF + "<F3 Disponível>", "Informe o lote final para o filtro." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'07','Veículo de?                   ','Veículo de?                   ','Veículo de?                   ','mv_ch7','C', 6,0,0,'G','','mv_par07','','','','','','','','','','','','','','','','','','','','','','','','','ZV0VEI','S','','','','', {"Informe o veículo inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o veículo inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o veículo inicial para o filtro." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'08','Veículo até?                  ','Veículo até?                  ','Veículo até?                  ','mv_ch8','C', 6,0,0,'G','','mv_par08','','','','','','','','','','','','','','','','','','','','','','','','','ZV0VEI','S','','','','', {"Informe o veículo final para o filtro." + CRLF + "<F3 Disponível>", "Informe o veículo final para o filtro." + CRLF + "<F3 Disponível>", "Informe o veículo final para o filtro." + CRLF + "<F3 Disponível>"}} )
			
		elseif cPerg == "VAPCPA05A "
			AAdd( aDados, {cPerg,'01','Curral de?                    ','Curral de?                    ','Curral de?                    ','mv_ch1','C',20,0,0,'G','','mv_par01','','','','','','','','','','','','','','','','','','','','','','','','','Z08   ','S','','','','', {"Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>"}} )
			AAdd( aDados, {cPerg,'02','Curral Ate?                   ','Curral de?                    ','Curral de?                    ','mv_ch2','C',20,0,0,'G','','mv_par02','','','','','','','','','','','','','','','','','','','','','','','','','Z08   ','S','','','','', {"Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>", "Informe o curral inicial para o filtro." + CRLF + "<F3 Disponível>"}} )
		elseif cPerg == "VAPCPA05B "
			AAdd( aDados, {cPerg,'01','Qtde Cabecas?                 ','                              ','                              ','MV_CH1','N', 6,0,0,'G','','mv_par01','','','','','','','','','','','','','','','','','','','','','','','','','      ','S','','','@E 999,999','', {"Informe a quantidade total de cabecas.", "", ""}} )
			
		endif

		DbSelectArea( "SX1" )
		SX1->( DbSetOrder( 1 ) )
		
		nLenLin := Len( aDados )
		for i := 1 to nLenLin
			if !SX1->( DbSeek( PadR( aDados[i][1], nTam1 ) + PadR( aDados[i][2], nTam2 ) ) )
				RecLock( "SX1", .T. )
				nLenCol := Len( aEstrut )
				for j := 1 to nLenCol
					if aScan( aStruDic, { |aX| PadR( aX[1], 10 ) == PadR( aEstrut[j], 10 ) } ) > 0
						SX1->( FieldPut( FieldPos( aEstrut[j] ), aDados[i][j] ) )
					endif
				next
				MsUnLock()
				u_UpSX1Hlp("P." + AllTrim(SX1->X1_GRUPO) + AllTrim(SX1->X1_ORDEM) + ".", aDados[i][nLenCol+1], .T.)
			endif
		next
	endif

	Pergunte(cPerg, .F.)

	RestArea( aAreaDic )
	RestArea( aArea )

return nil
/* 
Chamada da rotina de ajuste de tratos U_vap05tra
*/
Static Function vap17tra()
	Local aSaveLines := FWSaveRows() as Array
	private aTratos 	:= {} as Array

	FWMsgRun(, { || U_vap05tra()}, "Nro de Tratos")

	if Len(aTratos) > 0
		u_vap05rec()
		AtualizaTela()
	endif

	FWRestRows(aSaveLines)
return nil
/* 
Chamada da rotina de ajuste de tratos U_vap05trt
*/
Static Function vap17trt()
	Local aSaveLines := FWSaveRows() as Array

	private aTratos 	:= {} as Array

	FWMsgRun(, { || U_vap05trt()}, "Ajuste de dietas")

	if Len(aTratos) > 0
		u_vap05rec()
		AtualizaTela()
	endif
	FWRestRows(aSaveLines)
return nil


//Static Function vap17tra()
//	local aParam      	:= {mv_par01, mv_par02, mv_par03, mv_par04, mv_par05} as Array
//	local cFillPerg   	:= "VAPCPA053" as Character
//	local nMaxTrato   	:= u_GetNroTrato() as Numeric
//	local aPosSX1     	:= {{ cFillPerg, "01", 6},;
//						  	{ cFillPerg, "02", "ROTA01"},;
//						  	{ cFillPerg, "03", "ROTA01"},;
//						  	{ cFillPerg, "04", "A01"},;
//						  	{ cFillPerg, "05", "A11" }} as Array
//	Local oModel      	:= FWModelActive() as Object
//	Local oView  	 	:= FWViewActive() 	as Object
//
//	//Local oGridRotaG  := oModel:GetModel("MdGridRotaG") as Object
//	//Local oGridZ06G   := oModel:GetModel("MdGridZ06G") as Object
//	//Local oGridZ06D   := oModel:GetModel("MdGridZ06D") as Object
//	//Local nI,nX,nJ,nY as Numeric
//	//local aPosSX1     := {{ cFillPerg, "01", 0},;
//	//					  { cFillPerg, "02", Replicate(" ", TamSX3("ZRT_ROTA")[1])},;
//	//					  { cFillPerg, "03", Replicate("Z", TamSX3("ZRT_ROTA")[1])},;
//	//					  { cFillPerg, "04", Replicate(" ", TamSX3("Z08_CODIGO")[1])},;
//	//					  { cFillPerg, "05", Replicate("Z", TamSX3("Z08_CODIGO")[1]) }} as Array
//	private cCodDieta 	:= "" as Character
//
//	if Z0R->Z0R_LOCK <= '1'
//        AtuSX1(@cFillPerg)
//        U_PosSX1(aPosSX1)
//        if Pergunte(cFillPerg)
//            if mv_par01 <= 0
//                Help(/*Descontinuado*/,/*Descontinuado*/,"QTDE TRATO INVALIDA",/**/,"A quantidade de tratos deve ser maior que 0.", 1, 1,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,.F.,{"Por favor, digite uma quatidade de tratos válida." })
//            elseif mv_par01 > nMaxTrato
//                Help(/*Descontinuado*/,/*Descontinuado*/,"QTDE TRATO INVALIDA",/**/,"A quantidade de tratos deve ser menor que " + AllTrim(Str(nMaxTrato)) +".", 1, 1,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,/*Descontinuado*/,.F.,{"Por favor, digite uma quatidade de tratos válida." })
//            else   
//                FWMsgRun(, { || U_ProcTrato()}, "Nro de Tratos", "Ajustando numero de tratos para " + AllTrim(Str(mv_par01))+ "...")
//
//				//if Len(aTratos)
//				//	aSort(aTratos,,, { |a, b| a[1] < b[1] } )
//				//endif
//
//				//For nI := 1 to Len(aTratos)
//				//	For nJ := 1 to oGridRotaG:Length()
//				//		oGridRotaG:GoLine(nJ)
//				//		if oGridRotaG:GetValue("Z0T_ROTA") == aTratos[nI,1]
//				//			For nX := 1 to oGridZ06G:Length()
//				//				oGridZ06G:GoLine(nJ)
//				//				if oGridZ06G:GetValue("Z06_LOTE") == aTratos[nI,1]
//				//				endif 
//				//			Next nX 
//				//		endif
//				//	Next nJ
//				//Next nI
//				if Len(aTratos) > 0
//					oModel:DeActivate()
//					oModel:Activate()
//					oView:Refresh()
//				endif
//            endif
//        endif
//        mv_par01 := aParam[1]; mv_par02 := aParam[2]; mv_par03 := aParam[3]; mv_par04 := aParam[4]; mv_par05 := aParam[5]
//    elseif Z0R->Z0R_LOCK = '2' 
//        Help(,, "OPERACAO NAO PERMITDA.",, "Não é possível alterar o trato pois ele já foi Publicado.", 1, 0,,,,,, {"Operação não permitida."})
//    elseif Z0R->Z0R_LOCK = '3' 
//        Help(,, "OPERACAO NAO PERMITDA.",, "Não é possível alterar o trato pois ele foi Encerrado.", 1, 0,,,,,, {"Operação não permitida."})
//    endif
//Return

Static Function AtualizaTela()
	Local oModel	  	:= FWModelActive() 	as Object
	Local oView 	 	:= FWViewActive() 	as Object

	oModel:DeActivate()

	oModel:Activate()
	
	oView:Refresh()
Return 

