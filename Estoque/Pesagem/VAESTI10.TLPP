#INCLUDE "TOTVS.CH"
#INCLUDE "TLPP-CORE.TH"
#INCLUDE "FWMVCDEF.CH"

namespace custom.VAESTI10

USER FUNCTION VAESTI10()
	Private oBrowse as object
	Private _cPlacaS := CriaVar('ZPB_PLACA', .F.) as Character
	Private _cDoc  	 := CriaVar('D1_DOC', .F.) as Character

	oBrowse := FWLoadBrw("custom.VAESTI10.VAESTI10")
	oBrowse:Activate()
	oBrowse:DeActivate()
	oBrowse:Destroy()
	FreeObj(oBrowse)
	oBrowse := nil

Return

user function BrowseDef() as object
	local oBrowse as object

	oBrowse := FWMBrowse():New()
	oBrowse:SetAlias("ZPC")
	oBrowse:SetDescription("Pesagens por NF")

return oBrowse

user Function MenuDef()
	Local aRot := {}
	
	ADD OPTION aRot TITLE 'Incluir'    	    	ACTION 'VIEWDEF.custom.VAESTI10.VAESTI10' 			OPERATION MODEL_OPERATION_INSERT ACCESS 0 //OPERATION 3
	ADD OPTION aRot TITLE 'Alterar'    			ACTION 'VIEWDEF.custom.VAESTI10.VAESTI10' 			OPERATION MODEL_OPERATION_UPDATE ACCESS 0 //OPERATION 4
	ADD OPTION aRot TITLE 'Visualizar' 			ACTION 'VIEWDEF.custom.VAESTI10.VAESTI10' 			OPERATION MODEL_OPERATION_VIEW   ACCESS 0 //OPERATION 1
	ADD OPTION aRot TITLE 'Excluir'    			ACTION 'VIEWDEF.custom.VAESTI10.VAESTI10' 			OPERATION MODEL_OPERATION_DELETE ACCESS 0 //OPERATION 5

Return aRot

user function ModelDef() as object
	local oModel    := nil as object
	local oStrCab   := FWFormStruct(1,'ZPC', {|cCampo| AllTrim(cCampo) $ "ZPC_FILIAL|ZPC_CODIGO"}) as object
	local oStrZPC   := FWFormStruct(1,'ZPC', {|cCampo| AllTrim(cCampo) $ "ZPC_FILIAL|ZPC_CODIGO|ZPC_ITEM|ZPC_DATA|ZPC_FORNEC|ZPC_LOJA|ZPC_NOME|ZPC_DOC|ZPC_SERIE|ZPC_EMISSA|ZPC_USER|ZPC_HORA"}) as object
	local oStrZPD   := FWFormStruct(1,'ZPD') as object
	local oStrZPF   := FWFormStruct(1,'ZPF') as object
	Local bVldCom  	:= {|| custom.VAESTI10.u_zSaveZPC()  } as codeblock
	Local bVldPos  	:= {|| custom.VAESTI10.u_ValidaVA10EST()} as codeblock
	local bLPreZPC	:= {|| custom.VAESTI10.U_PreValidacaoGrid("ZPCDETAIL") } as codeblock
	local bLPreZPD	:= {|| custom.VAESTI10.U_PreValidacaoGrid("ZPDDETAIL") } as codeblock
	local bLPreZPF	:= {|| custom.VAESTI10.U_PreValidacaoGrid("ZPFDETAIL") } as codeblock
	Local nI
	Local aRel  	:= {}
	Local aTrigger  := {}

	oStrCab:SetProperty('ZPC_CODIGO', MODEL_FIELD_INIT, FWBuildFeature( STRUCT_FEATURE_INIPAD, "IIF(INCLUI,custom.VAESTI10.u_InicializadorCodigoHide(),ZPC->ZPC_CODIGO)" ) )

	oStrZPC:SetProperty('ZPC_FORNEC', MODEL_FIELD_OBRIGAT, .T. )
	oStrZPC:SetProperty('ZPC_LOJA'  , MODEL_FIELD_OBRIGAT, .T. )
	oStrZPC:SetProperty('ZPC_DOC'   , MODEL_FIELD_OBRIGAT, .T. )
	oStrZPC:SetProperty('ZPC_SERIE' , MODEL_FIELD_OBRIGAT, .T. )

	oStrZPC:SetProperty('ZPC_DOC'  , MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, "custom.VAESTI10.U_ValidaNF()" ) )
	oStrZPC:SetProperty('ZPC_SERIE', MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, "custom.VAESTI10.U_ValidaNF()" ) )
	oStrZPC:SetProperty('ZPC_LOJA' , MODEL_FIELD_VALID, FWBuildFeature( STRUCT_FEATURE_VALID, "custom.VAESTI10.U_ValidaFornece()" ) )
	
	oStrZPD:SetProperty('ZPD_PESOE' , MODEL_FIELD_INIT, FWBuildFeature( STRUCT_FEATURE_INIPAD, "IIF(INCLUI,0,POSICIONE('ZPB',1,FWXFILIAL('ZPB')+DTOS(ZPD->ZPD_DTPES)+ZPD->ZPD_CODZPB,'ZPB_PESOE' ))" ) )
	oStrZPD:SetProperty('ZPD_PESOS' , MODEL_FIELD_INIT, FWBuildFeature( STRUCT_FEATURE_INIPAD, "IIF(INCLUI,0,POSICIONE('ZPB',1,FWXFILIAL('ZPB')+DTOS(ZPD->ZPD_DTPES)+ZPD->ZPD_CODZPB,'ZPB_PESOS' ))" ) )
	oStrZPD:SetProperty('ZPD_PESOL' , MODEL_FIELD_INIT, FWBuildFeature( STRUCT_FEATURE_INIPAD, "IIF(INCLUI,0,POSICIONE('ZPB',1,FWXFILIAL('ZPB')+DTOS(ZPD->ZPD_DTPES)+ZPD->ZPD_CODZPB,'ZPB_PESOL' ))" ) )
	oStrZPD:SetProperty('ZPD_NFISCA', MODEL_FIELD_INIT, FWBuildFeature( STRUCT_FEATURE_INIPAD, "IIF(INCLUI,'',POSICIONE('ZPB',1,FWXFILIAL('ZPB')+DTOS(ZPD->ZPD_DTPES)+ZPD->ZPD_CODZPB,'ZPB_NOTFIS' ))" ) )
	
	oStrZPF:SetProperty('ZPF_RACA' , MODEL_FIELD_OBRIGAT, .T. )
	oStrZPF:SetProperty('ZPF_SEXO' , MODEL_FIELD_OBRIGAT, .T. )
	oStrZPF:SetProperty('ZPF_QUANT', MODEL_FIELD_OBRIGAT, .T. )
	
	aAdd(aTrigger, FwStruTrigger("ZPC_LOJA" ,"ZPC_NOME"   ,"SA2->A2_NOME"   ,.T.,"SA2",1,"FWxFilial('SA2') + M->ZPC_FORNEC + M->ZPC_LOJA" ,NIL,"01" )) 
	aAdd(aTrigger, FwStruTrigger("ZPC_SERIE","ZPC_EMISSA" ,"SF1->F1_EMISSAO",.T.,"SF1",2,"FWxFilial('SD1') + M->ZPC_FORNEC + M->ZPC_LOJA + M->ZPC_DOC" ,NIL,"01" )) 

	For nI := 1 To Len(aTrigger)
		oStrZPC:AddTrigger(aTrigger[nI,1], aTrigger[nI,2], aTrigger[nI,3], aTrigger[nI,4])
	Next nI

	aAdd(aTrigger, FwStruTrigger("ZPF_QUANT","ZPF_USER"   ,"cUserName",.F.,"",nil,"" ,NIL,"01" ))
	aAdd(aTrigger, FwStruTrigger("ZPF_QUANT","ZPF_HORA"   ,"Time()"   ,.F.,"",nil,"" ,NIL,"02" ))
	aAdd(aTrigger, FwStruTrigger("ZPF_QUANT","ZPF_DATA"   ,"Date()"   ,.F.,"",nil,"" ,NIL,"03" ))
	aTrigger:= {}
	
	For nI := 1 To Len(aTrigger)
		oStrZPF:AddTrigger(aTrigger[nI,1], aTrigger[nI,2], aTrigger[nI,3], aTrigger[nI,4])
	Next nI


	oModel := MPFormModel():New("custom.VAESTI10.VA10EST",,bVldPos,bVldCom)
	oModel:SetDescription("Notas Fiscais de Pesagem")
	
    oModel:AddFields("HIDEMASTER","" , oStrCab, /*bPreValid*/		,/* bPosValid */, /* bLoadHide */)
    oModel:AddGrid("ZPCDETAIL"  ,"HIDEMASTER" , oStrZPC,bLPreZPC,,,, /* bLoadZPC */)
    oModel:AddGrid("ZPDDETAIL"  ,"ZPCDETAIL"  , oStrZPD,bLPreZPD,,,, /* bLoadZPD */)
    oModel:AddGrid("ZPFDETAIL"  ,"ZPDDETAIL"  , oStrZPF,bLPreZPF,,,, /* bLoadZPF */)

	aAdd(aRel, {'ZPC_FILIAL', 'ZPC_FILIAL'} )
	aAdd(aRel, {'ZPC_CODIGO', 'ZPC_CODIGO'} )
	oModel:SetRelation('ZPCDETAIL', aRel, ZPC->(IndexKey(1)))
	
	aRel := {}
	aAdd(aRel, {'ZPD_FILIAL', "ZPC_FILIAL"} )
	aAdd(aRel, {'ZPD_CODIGO', 'ZPC_CODIGO'} )
	aAdd(aRel, {'ZPD_ITZPC' , 'ZPC_ITEM'} )
	oModel:SetRelation('ZPDDETAIL', aRel, ZPD->(IndexKey(1)))
	
	aRel := {}	
	aAdd(aRel, {'ZPF_FILIAL', "ZPD_FILIAL"} )
	aAdd(aRel, {'ZPF_CODIGO', 'ZPD_CODIGO'} )
	aAdd(aRel, {'ZPF_ITZPC' , 'ZPD_ITZPC' } )
	aAdd(aRel, {'ZPF_ITZPD' , 'ZPD_ITEM'  } )
	oModel:SetRelation('ZPFDETAIL', aRel, ZPF->(IndexKey(1)))

	oModel:SetPrimaryKey({"ZPC_FILIAL","ZPC_CODIGO","ZPC_ITEM"})

    oModel:GetModel("HIDEMASTER"):SetDescription("HIDE")
    oModel:GetModel("ZPCDETAIL"):SetDescription("Notas Fiscais")
    oModel:GetModel("ZPDDETAIL"):SetDescription("Pesagens")
    oModel:GetModel("ZPFDETAIL"):SetDescription("Animais")

	oModel:SetOptional("ZPFDETAIL", .T.)

return oModel

user Function ViewDef()
	Local oModel    := FWLoadModel("custom.VAESTI10.VAESTI10") as Object
	local oStrCab   := FWFormStruct(2,'ZPC', {|cCampo| AllTrim(cCampo) $ "ZPC_FILIAL|ZPC_CODIGO"}) as object
	local oStrZPC   := FWFormStruct(2,'ZPC', {|cCampo| AllTrim(cCampo) $ "ZPC_FILIAL|ZPC_CODIGO|ZPC_ITEM|ZPC_DATA|ZPC_FORNEC|ZPC_LOJA|ZPC_NOME|ZPC_DOC|ZPC_SERIE|ZPC_EMISSA|ZPC_USER|ZPC_HORA"}) as object
	local oStrZPD   := FWFormStruct(2,'ZPD') as object
	local oStrZPF   := FWFormStruct(2,'ZPF') as object
	Local oView     := NIL

	oView := FWFormView():New()
	oView:SetModel(oModel)

	oView:AddField("VIEW_HIDE", oStrCab  , "HIDEMASTER")
	oView:AddGrid("VIEW_ZPC" , oStrZPC , "ZPCDETAIL")
	oView:AddGrid("VIEW_ZPD" , oStrZPD , "ZPDDETAIL")
	oView:AddGrid("VIEW_ZPF" , oStrZPF , "ZPFDETAIL")

	oView:CreateHorizontalBox('HIDE' , 0)
	oView:CreateHorizontalBox('GRID_ZPC', 40)
	oView:CreateHorizontalBox('GRID_ZPD', 30)
	oView:CreateHorizontalBox('GRID_ZPF', 30)

	oView:SetOwnerView('VIEW_HIDE' ,'HIDE' )
	oView:SetOwnerView('VIEW_ZPC','GRID_ZPC')
	oView:SetOwnerView('VIEW_ZPD','GRID_ZPD')
	oView:SetOwnerView('VIEW_ZPF','GRID_ZPF')
    
    oView:EnableTitleView('VIEW_HIDE' , 'Dados da NF') 
    oView:EnableTitleView('VIEW_ZPC', 'Notas Fiscais') 
    oView:EnableTitleView('VIEW_ZPD', 'Pesagens') 
    oView:EnableTitleView('VIEW_ZPF', 'Animais') 

	oView:AddIncrementField( 'VIEW_ZPC', 'ZPC_ITEM' )
	oView:AddIncrementField( 'VIEW_ZPD', 'ZPD_ITEM' )
	oView:AddIncrementField( 'VIEW_ZPF', 'ZPF_ITEM' )

	oView:SetCloseOnOk( { |oView| .T. } )
    
	oStrZPC:RemoveField('ZPC_HORA')

    oStrZPD:RemoveField('ZPD_CODIGO')
    oStrZPD:RemoveField('ZPD_ITZPC')
	
    oStrZPF:RemoveField('ZPF_CODIGO')
	oStrZPF:RemoveField('ZPF_ITZPD')
	oStrZPF:RemoveField('ZPF_ITZPC')
	oStrZPF:RemoveField('ZPF_HORA')

Return oView

User Function VA10EST()
	Local aParam 		:= PARAMIXB
	Local lRet 			:= .T.
	Local cIdPonto 		:= ''
	Local cIdModel 		:= ''
	Local cIdIXB5		:= ''
	Local cIdIXB4		:= ''
	Local oModel 	 	:= nil
	
	If aParam <> NIL
		oModel 	 := aParam[1]
		cIdPonto := aParam[2]
		cIdModel := aParam[3]

		if len(aParam) >= 4
			cIdIXB4  := aParam[4]
		endif

		if len(aParam) >= 5
			cIdIXB5  := aParam[5]
		endif 
		
		if cIdPonto == "MODELVLDACTIVE"
		
		endif
	endif
Return lRet 

User Function zSaveZPC()
    Local aArea      	:= GetArea()
	Local lRet       	:= .T.
	Local oModel	  	:= FWModelActive()
	Local oMdCab 	    := oModel:GetModel('HIDEMASTER')
	Local oMdZPC 	    := oModel:GetModel('ZPCDETAIL')
	Local oMdZPD 	    := oModel:GetModel('ZPDDETAIL')
	Local oMdZPF 	    := oModel:GetModel('ZPFDETAIL')
	Local nOpc       	:= oModel:GetOperation()
	Local nI,nJ,nX		:= 0
	Local lRecLock   	:= .T.
	Local nLinhas	 	:= oMdZPC:Length()
	
	//ZPC_FILIAL + ZPC_CODIGO + ZPC_ITEM
	ZPC->(DbSetOrder(1))
	
	//ZPD_FILIAL + ZPD_CODIGO + ZPD_ITZPC + ZPD_ITEM
	ZPD->(DbSetOrder(1))
	
	ZPF->(DbSetOrder(1))
	
	//Se for Inclusão
	If nOpc == 3 .OR. nOpc == 4

        For nI := 1 To nLinhas
            oMdZPC:GoLine(nI)
            If !oMdZPC:isDeleted()
                RecLock('ZPC', lRecLock := !ZPC->(DbSeek( xFilial("ZPC") +;
                                            oMdZPC:GetValue('ZPC_CODIGO') +;
                                            oMdZPC:GetValue('ZPC_ITEM'))))

					ZPC->ZPC_FILIAL		:= xFilial("ZPC")
					ZPC->ZPC_CODIGO 	:= oMdCab:GetValue('ZPC_CODIGO')
					ZPC->ZPC_ITEM   	:= oMdZPC:GetValue('ZPC_ITEM')
					ZPC->ZPC_DATA  		:= oMdZPC:GetValue('ZPC_DATA') 
					ZPC->ZPC_DOC    	:= oMdZPC:GetValue('ZPC_DOC') 
					ZPC->ZPC_SERIE  	:= oMdZPC:GetValue('ZPC_SERIE') 
					ZPC->ZPC_FORNEC 	:= oMdZPC:GetValue('ZPC_FORNEC') 
					ZPC->ZPC_LOJA   	:= oMdZPC:GetValue('ZPC_LOJA') 
					ZPC->ZPC_EMISSA 	:= oMdZPC:GetValue('ZPC_EMISSA') 
					ZPC->ZPC_USER   	:= oMdZPC:GetValue('ZPC_USER')
					ZPC->ZPC_HORA   	:= oMdZPC:GetValue('ZPC_HORA')
                ZPC->(MsUnlock())

				For nX := 1 To oMdZPD:Length()
					oMdZPD:GoLine(nX)
					If !oMdZPD:isDeleted()
						RecLock('ZPD', lRecLock := !ZPD->(DbSeek( FWxFilial("ZPD") +;
												oMdZPD:GetValue('ZPD_CODIGO') +;
												oMdZPD:GetValue('ZPD_ITZPC') +;
												oMdZPD:GetValue('ZPD_ITEM'))))
							
							ZPD->ZPD_FILIAL		:= FWxFilial("ZPD")
							ZPD->ZPD_CODIGO 	:= oMdCab:GetValue('ZPC_CODIGO')
							ZPD->ZPD_ITZPC 		:= oMdZPC:GetValue('ZPC_ITEM')
							ZPD->ZPD_ITEM   	:= oMdZPD:GetValue('ZPD_ITEM')
							ZPD->ZPD_DTPES  	:= oMdZPD:GetValue('ZPD_DTPES')
							ZPD->ZPD_PLACA   	:= oMdZPD:GetValue('ZPD_PLACA')
							ZPD->ZPD_CODZPB   	:= oMdZPD:GetValue('ZPD_CODZPB')

                		ZPD->(MsUnlock())

						For nJ := 1 to oMdZPF:Length()
							oMdZPF:GoLine(nJ)
							if !oMdZPF:isDeleted() .and. oMdZPF:GetValue("ZPF_RACA") != "" .and. ;
							   oMdZPF:GetValue("ZPF_SEXO") != "" .and. ;
							   oMdZPF:GetValue("ZPF_QUANT") > 0

								RecLock('ZPF', lRecLock := !ZPF->(DbSeek( FWxFilial("ZPF") +;
												oMdZPF:GetValue('ZPF_CODIGO')+;
												oMdZPF:GetValue('ZPF_ITZPC')+;
												oMdZPF:GetValue('ZPF_ITZPD') +;
												oMdZPF:GetValue('ZPF_ITEM'))))

									ZPF->ZPF_FILIAL		:= FWxFilial("ZPD")
									ZPF->ZPF_CODIGO 	:= oMdCab:GetValue('ZPC_CODIGO')
									ZPF->ZPF_ITZPC 		:= oMdZPC:GetValue('ZPC_ITEM')
									ZPF->ZPF_ITZPD 		:= oMdZPD:GetValue('ZPD_ITEM')
									ZPF->ZPF_ITEM   	:= oMdZPF:GetValue('ZPF_ITEM')
									ZPF->ZPF_RACA  		:= oMdZPF:GetValue('ZPF_RACA')
									ZPF->ZPF_SEXO   	:= oMdZPF:GetValue('ZPF_SEXO')
									ZPF->ZPF_QUANT   	:= oMdZPF:GetValue('ZPF_QUANT')
									ZPF->ZPF_USER   	:= oMdZPF:GetValue('ZPF_USER')
									ZPF->ZPF_DATA   	:= oMdZPF:GetValue('ZPF_DATA')
									ZPF->ZPF_HORA   	:= oMdZPF:GetValue('ZPF_HORA')
								ZPF->(MsUnlock())
							else
								If ZPF->(DbSeek( FWxFilial("ZPF") +;
										oMdZPF:GetValue('ZPF_CODIGO') +;
										oMdZPF:GetValue('ZPF_ITZPC') +;
										oMdZPF:GetValue('ZPF_ITZPD') +;
										oMdZPF:GetValue('ZPF_ITEM')))

									RecLock('ZPF', .F.)
										ZPF->(DbDelete())
									ZPF->(MsUnlock())
								EndIf
							endif 
						Next nJ 
					else
						If ZPD->(DbSeek( FWxFilial("ZPD") +;
								oMdZPD:GetValue('ZPD_CODIGO') +;
								oMdZPD:GetValue('ZPD_ITZPC') +;
								oMdZPD:GetValue('ZPD_ITEM')))

							RecLock('ZPD', .F.)
								ZPD->(DbDelete())
							ZPD->(MsUnlock())
               			EndIf
					EndIF
				Next nX

            Else		
                If ZPC->(DbSeek( xFilial("ZPC") +;
						oMdCab:GetValue('ZPC_CODIGO') +;
						oMdZPC:GetValue('ZPC_ITEM')))

                    RecLock('ZPC', .F.)
                        ZPC->(DbDelete())
                    ZPC->(MsUnlock())
                EndIf
            EndIf
        Next nI
	//Se for ExclusÃ£o
	ElseIf nOpc == 5
		For nI := 1 To oMdZPC:Length()
			oMdZPC:GoLine(nI)
			For nX := 1 To oMdZPD:Length()
				oMdZPD:GoLine(nX)
				For nJ := 1 to oMdZPF:Length()
					oMdZPF:GoLine(nJ)
					If ZPF->(DbSeek( FWxFilial("ZPF") +;
							oMdZPF:GetValue('ZPF_CODIGO') +;
							oMdZPF:GetValue('ZPF_ITZPC') +;
							oMdZPF:GetValue('ZPF_ITZPD') +;
							oMdZPF:GetValue('ZPF_ITEM')))

						RecLock('ZPF', .F.)
							ZPF->(DbDelete())
						ZPF->(MsUnlock())
					EndIf
				Next nJ

				If ZPD->(DbSeek( FWxFilial("ZPD") +;
						oMdZPD:GetValue('ZPD_CODIGO') +;
						oMdZPD:GetValue('ZPD_ITZPC') +;
						oMdZPD:GetValue('ZPD_ITEM')))

					RecLock('ZPD', .F.)
						ZPD->(DbDelete())
					ZPD->(MsUnlock())
				EndIf
			Next nX 

			If ZPC->(DbSeek( xFilial("ZPC") +;
					oMdCab:GetValue('ZPC_CODIGO') +;
					oMdZPC:GetValue('ZPC_ITEM')))

				RecLock('ZPC', .F.)
					ZPC->(DbDelete())
				ZPC->(MsUnlock())
			EndIf
		Next nI
	EndIf

	//Se nÃ£o for inclusÃ£o, volta o INCLUI para .T. (bug ao utilizar a ExclusÃ£o, antes da InclusÃ£o)
	If nOpc != 3
		INCLUI := .T.
	EndIf

	RestArea(aArea)
Return lRet

User Function XbZpcZpb()
    Local aArea	 := GetArea()
	Local oDlg, oLbx
    Local aCpos  := {}
    Local aRet   := {}
    Local _cQry  := ""
    Local cAlias := ""
    Local lRet   := .F.
    Local cArquivo      := "C:\TOTVS_RELATORIOS\"
    Local cPerg         := FunName()
	Local oView		    := FWViewActive()
	Local oModel  	    := FWModelActive()
	Local oMdZPC        := oModel:GetModel('ZPCDETAIL')
	Local oMdZPD        := oModel:GetModel('ZPDDETAIL')
	Local oFontNormal   := TFont():New( "Courier New",0,-15,,.T.,0,,400,.F.,.F.,,,,,, )

	_cQry := " Select   ZPB_FILIAL" + CRLF
	_cQry += "		,  ZPB_DATA " 	+ CRLF
	_cQry += "		,  ZPB_HORAF " 	+ CRLF
	_cQry += "		,  ZPB_CODIGO " + CRLF
	_cQry += "		,  ZPB_CODFOR " + CRLF
	_cQry += "		,  ZPB_LOJFOR " + CRLF
	_cQry += "		,  ZPB_NOMFOR " + CRLF
	_cQry += "		,  ZPB_PLACA  " + CRLF
	_cQry += "		,  ZPB_PESOE  " + CRLF
	_cQry += "		,  ZPB_PESOS  " + CRLF
	_cQry += "		,  ZPB_PESOL " 	+ CRLF
	_cQry += "		,  ZPB_NOMMOT " + CRLF
	_cQry += "		,  ZPB_NOTFIS " + CRLF
	_cQry += "	FROM "+RetSqlName("ZPB")+" ZPB " + CRLF
	_cQry += "	WHERE   ZPB_FILIAL = '"+FwxFilial('ZPB')+"'" + CRLF 
	_cQry += "		--AND ZPB_DATA  = '"+DtoS(Date())+"' " + CRLF 
	_cQry += "		AND ZPB_PESOE > 0" + CRLF
	_cQry += "		AND ZPB_CODFOR = '"+oMdZPC:GetValue("ZPC_FORNEC")+"'" + CRLF
	_cQry += "		AND ZPB_LOJFOR = '"+oMdZPC:GetValue("ZPC_LOJA")+"'" + CRLF
	_cQry += "				AND ZPB_FILIAL + ZPB_DATA + ZPB_CODIGO NOT IN (SELECT ZPD_FILIAL + ZPD_DTPES + ZPD_CODZPB  " + CRLF
	_cQry += "															FROM "+RetSqlName("ZPD")+" ZPD" + CRLF
	_cQry += "															JOIN "+RetSqlName("ZPB")+" ZPB ON ZPD_FILIAL = ZPB_FILIAL" + CRLF
	_cQry += "																AND ZPB_DATA  = ZPD_DTPES " + CRLF
	_cQry += "																AND ZPB_CODIGO = ZPD_CODZPB" + CRLF
	_cQry += "																AND ZPB_PLACA  = ZPD_PLACA" + CRLF
	_cQry += "																AND ZPB.D_E_L_E_T_ = ''" + CRLF
	_cQry += "															WHERE ZPD.D_E_L_E_T_ = '' ) " + CRLF
	_cQry += "		AND ZPB.D_E_L_E_T_ = ''" + CRLF
	_cQry += "		ORDER BY 2 DESC " + CRLF

 	If lower(cUserName) $ 'administrador,admin,bernardo,ioliveira,atoshio'
		MemoWrite(StrTran(cArquivo,".xml","")+cPerg+".sql" , _cQry)
	EndIf

    cAlias:=  MpSysOpenQuery(_cQry)

    While !(cAlias)->(EOF())
        aAdd(aCpos,{		(cAlias)->ZPB_DATA,;
				    		(cAlias)->ZPB_HORAF,;
					AllTrim((cAlias)->ZPB_CODIGO),;
					AllTrim((cAlias)->ZPB_NOTFIS),;
					AllTrim((cAlias)->ZPB_CODFOR),;
					AllTrim((cAlias)->ZPB_LOJFOR),;
					AllTrim((cAlias)->ZPB_NOMFOR),;
					AllTrim((cAlias)->ZPB_PLACA),;
							(cAlias)->ZPB_PESOE,;
							(cAlias)->ZPB_PESOS,;
							(cAlias)->ZPB_PESOL,;
					AllTrim((cAlias)->ZPB_NOMMOT)})
        (cAlias)->(dbSkip())
    End
    (cAlias)->(dbCloseArea())

    If Len(aCpos) < 1
        aAdd(aCpos,{"","","","","","","","","","","",""})
    EndIf

    DEFINE MSDIALOG oDlg TITLE /*STR0083*/ "Listagem das Pesagens" FROM 0,0 TO 325,1250 PIXEL

    @ 0,0 LISTBOX oLbx FIELDS HEADER 'DATA' /*"Produto"*/,;
        'HORA F.',;
		'CODIGO',;
		'NOTA FISCAL',;
		'COD FORNEC',;
		'LOJA FORNEC',;
		'FORNECEDOR',;
		'PLACA',;
		'PESO E.',;
		'PESO S.',;
		'PESO L.',;
		'MOTORISTA' SIZE 630,150 OF oDlg PIXEL

    oLbx:oFont := oFontNormal
    oDlg:oFont := oFontNormal

    oLbx:SetArray( aCpos )
    oLbx:bLine     := {|| { sToD(aCpos[oLbx:nAt,1]),;
                            aCpos[oLbx:nAt,2],;
                            aCpos[oLbx:nAt,3],;
                            aCpos[oLbx:nAt,4],;
                            aCpos[oLbx:nAt,5],;
                            aCpos[oLbx:nAt,6],;
                            aCpos[oLbx:nAt,7],;
                            aCpos[oLbx:nAt,8],;
                            aCpos[oLbx:nAt,9],;
                            aCpos[oLbx:nAt,10],;
                            aCpos[oLbx:nAt,11],;
                            aCpos[oLbx:nAt,12]}}
    oLbx:bLDblClick := {|| {oDlg:End(), lRet:=.T., aRet := {sToD(oLbx:aArray[oLbx:nAt,1]),;
                            oLbx:aArray[oLbx:nAt,2],;
                            oLbx:aArray[oLbx:nAt,3],;
                            oLbx:aArray[oLbx:nAt,4],;
                            oLbx:aArray[oLbx:nAt,5],;
                            oLbx:aArray[oLbx:nAt,6],;
                            oLbx:aArray[oLbx:nAt,7],;
                            oLbx:aArray[oLbx:nAt,8],;
                            oLbx:aArray[oLbx:nAt,9],;
                            oLbx:aArray[oLbx:nAt,10],;
                            oLbx:aArray[oLbx:nAt,11],;
                            oLbx:aArray[oLbx:nAt,12]}}}
    DEFINE SBUTTON FROM 150,590 TYPE 1 ACTION (oDlg:End(), lRet:=.T.,;
        aRet := {sToD(oLbx:aArray[oLbx:nAt,1]),;
                 oLbx:aArray[oLbx:nAt,2],;
                 oLbx:aArray[oLbx:nAt,3],;
                 oLbx:aArray[oLbx:nAt,4],;
                 oLbx:aArray[oLbx:nAt,5],;
                 oLbx:aArray[oLbx:nAt,6],;
                 oLbx:aArray[oLbx:nAt,7],;
                 oLbx:aArray[oLbx:nAt,8],;
                 oLbx:aArray[oLbx:nAt,9],;
                 oLbx:aArray[oLbx:nAt,10],;
                 oLbx:aArray[oLbx:nAt,11],;
                 oLbx:aArray[oLbx:nAt,12]})  ENABLE OF oDlg
    
    ACTIVATE MSDIALOG oDlg CENTER

    If Len(aRet) > 0 .And. lRet
        If Empty(aRet[6])
            lRet := .F.
        Else
			_cPlacaS	:= aRet[8]

            ZPB->(DbSetOrder(1))
            IF ZPB->(DbSeek(FWXFilial('ZPB')+DTOs(aRet[1])+aRet[3]))
                oMdZPD:SetValue("ZPD_ITZPC"  , oMdZPC:GetValue("ZPC_ITEM"))
                oMdZPD:SetValue("ZPD_CODZPB" , ZPB->ZPB_CODIGO)
                oMdZPD:SetValue("ZPD_DTPES"  , ZPB->ZPB_DATA)
                oMdZPD:SetValue("ZPD_PESOE"  , ZPB->ZPB_PESOE)
                oMdZPD:SetValue("ZPD_PESOS"  , ZPB->ZPB_PESOS)
                oMdZPD:SetValue("ZPD_PESOL"  , ZPB->ZPB_PESOL)
                oMdZPD:SetValue("ZPD_NFISCA" , ZPB->ZPB_NOTFIS)
            ENDIF

            ZPB->(DbCloseArea())
        EndIf
    EndIf

	oView:Refresh()
	RestArea(aArea)
RETURN lRet

User Function InicializadorCodigoHide()
	Local aArea := GetArea()
	Local cRet := ''
	Local cQry := ''
	Local cAlias := ''

	cQry := "SELECT MAX(ZPC_CODIGO) AS ZPC_CODIGO FROM "+RetSqlName("ZPC")+" WHERE ZPC_FILIAL = '"+FWXFilial("ZPC")+"'"
	
	cAlias := MpSysOpenQuery(cQry)

	If !(cAlias)->(EOF())
		cRet := (cAlias)->ZPC_CODIGO
		cRet := StrZero(Val(cRet) + 1,TamSx3("ZPC_CODIGO")[1])
	Else
		cRet := '000001'
	EndIf
	(cAlias)->(dbCloseArea())
	
	RestArea(aArea)

Return cRet

User Function ValidaNF()
	Local aArea  	:= GetArea()
	Local oView 	:= FWViewActive()
	Local oModel 	:= FWModelActive()
	Local oMdZPC 	:= oModel:GetModel('ZPCDETAIL')
	local lRet 	 	:= .T.
	local nLine 	:= oMdZPC:GetLine()
	local nI 		:= 0
	local cCampo 	:= ReadVar()
	
	IF "ZPC_DOC" $ cCampo 
		oMdZPC:LoadValue("ZPC_SERIE", "")
		oMdZPC:LoadValue("ZPC_EMISSA", cToD("//"))
	else
		if !Empty(oMdZPC:GetValue("ZPC_DOC"))
			For nI := 1 to oMdZPC:Length()
				oMdZPC:GoLine(nI)
				if oMdZPC:GetValue("ZPC_DOC") == oMdZPC:GetValue("ZPC_DOC",nLine) .and. ;
				oMdZPC:GetValue("ZPC_SERIE") == oMdZPC:GetValue("ZPC_SERIE",nLine) .and. ;
				oMdZPC:GetValue("ZPC_FORNEC") == oMdZPC:GetValue("ZPC_FORNEC",nLine) .and. ;
				oMdZPC:GetValue("ZPC_LOJA") == oMdZPC:GetValue("ZPC_LOJA",nLine) .and. ;
				nI != nLine
					oModel:SetErrorMessage("","","","","HELP", '', "Nota Fiscal já cadastrada!")
					lRet := .F.
					Exit
				endif
			Next nI
			
			IF lRet 
				SF1->(DbSetOrder(2))
				if SF1->(DbSeek(FWXFilial("SF1") + oMdZPC:GetValue("ZPC_FORNEC") + oMdZPC:GetValue("ZPC_LOJA") + oMdZPC:GetValue("ZPC_DOC")))
					IF SF1->F1_SERIE != oMdZPC:GetValue("ZPC_SERIE")
						oModel:SetErrorMessage("","","","","HELP", '', "Nota Fiscal não encontrada na série informada!")
						lRet := .F.
					ELSE
						oMdZPC:SetValue("ZPC_USER", cUserName)
					ENDIF
				else
					oModel:SetErrorMessage("","","","","HELP", 'Verifique Fornecedor e Loja', "Nota Fiscal não encontrada para esse fornecedor!")
					lRet := .F.
				endif
			endif
		endif
	endif

	oView:Refresh()
	RestArea(aArea)
Return lRet

User Function ValidaFornece()
	Local aArea  	:= GetArea()
	Local oView 	:= FWViewActive()
	Local oModel 	:= FWModelActive()
	Local oMdZPC 	:= oModel:GetModel('ZPCDETAIL')
	local lRet 	 	:= .T.

	oMdZPC:SetValue("ZPC_DOC"	,"")
	oMdZPC:SetValue("ZPC_SERIE"	,"")
	oMdZPC:SetValue("ZPC_EMISSA",cToD("//"))
	oMdZPC:SetValue("ZPC_USER"	,"")

	SA2->(DbSetOrder(1))
	if !(SA2->(DbSeek(FWXFilial("SA2") + oMdZPC:GetValue("ZPC_FORNEC") + oMdZPC:GetValue("ZPC_LOJA"))))
		oModel:SetErrorMessage("","","","","HELP", '', "Fornecedor não encontrado para essa loja!")
		lRet := .F.
	endif

	oView:Refresh()
	RestArea(aArea)
Return lRet

User Function ValidaVA10EST()
	Local aArea      	:= GetArea()
	Local lRet       	:= .T.
	Local oModel	  	:= FWModelActive()
	Local oView		    := FWViewActive()
	Local oMdHide 	    := oModel:GetModel('HIDEMASTER')
	Local nOpc       	:= oModel:GetOperation()
	local cCod 			:= oMdHide:GetValue('ZPC_CODIGO')

	If nOpc == 3
		oMdHide:LoadValue('ZPC_CODIGO', "")
		oView:Refresh()
		oMdHide:LoadValue('ZPC_CODIGO', cCod)
	EndIf

	RestArea(aArea)
	oView:Refresh()
Return lRet

User Function PreValidacaoGrid(cGrid)
	Local lRet 		:= .F. as logical
	local aGrupos 	:= FWSFUsrGrps(__cUserID) as Array
	local nI 		:= 0 as Numeric
	local cPermiss  := "" as character

	if cGrid == "ZPCDETAIL"
		cPermiss := GetMV("MV_EST10CD",,"000007")
	elseif cGrid == "ZPDDETAIL"
		cPermiss := GetMV("MV_EST10CD",,"000007")
	elseif cGrid == "ZPFDETAIL"
		cPermiss := GetMV("MV_EST10F",,"000023")
	endif

	if FWIsAdmin(__cUserID) // não é administrador
		lRet := .T.
	else
		For nI := 1 To Len(aGrupos) 
			If aGrupos[nI] $ cPermiss // tem permissão para VA10EST
				lRet := .T.
				Exit
			EndIf
		Next nI
	endif

	IF !lRet
		oModel:SetErrorMessage("","","","","HELP", '', "Usuário não tem permissão para alterar " + IIF(cGrid == "ZPFDETAIL",;
																									"a grid de Animais!",;
																									"as grids de Notas fiscais e Pesagem!"))
	endif

Return lRet
